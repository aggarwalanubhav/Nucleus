/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgtemplate.cpp.tt>
 ******************************************************************************/ 

#include "srvccPsToCsRequestMsg.h"
#include "../ieClasses/manual/gtpV2Ie.h"
#include "../ieClasses/gtpV2IeFactory.h"
#include "../ieClasses/imsiIe.h"
#include "../ieClasses/ipAddressIe.h"
#include "../ieClasses/teidCIe.h"
#include "../ieClasses/msisdnIe.h"
#include "../ieClasses/targetRncIdIe.h"
#include "../ieClasses/svFlagsIe.h"
#include "../ieClasses/stnSrIe.h"
#include "../ieClasses/mmContextForEutranSrvccIe.h"
#include "../ieClasses/sourceToTargetTransparentContainerIe.h"

SrvccPsToCsRequestMsg::SrvccPsToCsRequestMsg()
{
    msgType = SrvccPsToCsRequestMsgType;
    Uint16 mandIe;
    mandIe = IpAddressIeType;
    mandIe = (mandIe << 8) | 0; // mmeSgsnSvaddressForControlplane
    mandatoryIeSet.insert(mandIe);    mandIe = TeidCIeType;
    mandIe = (mandIe << 8) | 0; // mmeSgsnSvTeidForControlPlane
    mandatoryIeSet.insert(mandIe);    mandIe = SourceToTargetTransparentContainerIeType;
    mandIe = (mandIe << 8) | 0; // sourceToTargetTransparentContainer
    mandatoryIeSet.insert(mandIe);
}

SrvccPsToCsRequestMsg::~SrvccPsToCsRequestMsg()
{

}

bool SrvccPsToCsRequestMsg::encodeSrvccPsToCsRequestMsg(MsgBuffer &buffer,
                        SrvccPsToCsRequestMsgData
							const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;

    if (data.imsiIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ImsiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        rc = imsi.encodeImsiIe(buffer, data.imsi);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: imsi\n");
            return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = IpAddressIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    IpAddressIe mmeSgsnSvaddressForControlplane=
    dynamic_cast<
    IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
    rc = mmeSgsnSvaddressForControlplane.encodeIpAddressIe(buffer, data.mmeSgsnSvaddressForControlplane);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: mmeSgsnSvaddressForControlplane\n");
        return false;
    }

    
    // Encode the Ie Header
    header.ieType = TeidCIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    TeidCIe mmeSgsnSvTeidForControlPlane=
    dynamic_cast<
    TeidCIe&>(GtpV2IeFactory::getInstance().getIeObject(TeidCIeType));
    rc = mmeSgsnSvTeidForControlPlane.encodeTeidCIe(buffer, data.mmeSgsnSvTeidForControlPlane);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: mmeSgsnSvTeidForControlPlane\n");
        return false;
    }

    if (data.cMsisdnIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = MsisdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        MsisdnIe cMsisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        rc = cMsisdn.encodeMsisdnIe(buffer, data.cMsisdn);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: cMsisdn\n");
            return false;
        }
    }

    if (data.targetRncIdIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = TargetRncIdIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        TargetRncIdIe targetRncId=
        dynamic_cast<
        TargetRncIdIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetRncIdIeType));
        rc = targetRncId.encodeTargetRncIdIe(buffer, data.targetRncId);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: targetRncId\n");
            return false;
        }
    }

    if (data.svFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = SvFlagsIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        SvFlagsIe svFlags=
        dynamic_cast<
        SvFlagsIe&>(GtpV2IeFactory::getInstance().getIeObject(SvFlagsIeType));
        rc = svFlags.encodeSvFlagsIe(buffer, data.svFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: svFlags\n");
            return false;
        }
    }

    if (data.stnSrIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = StnSrIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        StnSrIe stnSr=
        dynamic_cast<
        StnSrIe&>(GtpV2IeFactory::getInstance().getIeObject(StnSrIeType));
        rc = stnSr.encodeStnSrIe(buffer, data.stnSr);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: stnSr\n");
            return false;
        }
    }

    if (data.mmContextForEutranSrvccIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = MmContextForEutranSrvccIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        MmContextForEutranSrvccIe mmContextForEutranSrvcc=
        dynamic_cast<
        MmContextForEutranSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextForEutranSrvccIeType));
        rc = mmContextForEutranSrvcc.encodeMmContextForEutranSrvccIe(buffer, data.mmContextForEutranSrvcc);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmContextForEutranSrvcc\n");
            return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = SourceToTargetTransparentContainerIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    SourceToTargetTransparentContainerIe sourceToTargetTransparentContainer=
    dynamic_cast<
    SourceToTargetTransparentContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceToTargetTransparentContainerIeType));
    rc = sourceToTargetTransparentContainer.encodeSourceToTargetTransparentContainerIe(buffer, data.sourceToTargetTransparentContainer);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: sourceToTargetTransparentContainer\n");
        return false;
    }
    return rc;

}

bool SrvccPsToCsRequestMsg::decodeSrvccPsToCsRequestMsg(MsgBuffer &buffer,
 SrvccPsToCsRequestMsgData 
 &data, Uint16 length)
{

    bool rc = false;
    GtpV2IeHeader ieHeader;
  
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while (buffer.lengthLeft() > IE_HEADER_SIZE)
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }

        switch (ieHeader.ieType){
     
            case ImsiIeType:
            {
                ImsiIe ieObject =
                dynamic_cast<
                ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeImsiIe(buffer, data.imsi, ieHeader.length);

                    data.imsiIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: imsi\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IpAddressIeType:
            {
                IpAddressIe ieObject =
                dynamic_cast<
                IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIpAddressIe(buffer, data.mmeSgsnSvaddressForControlplane, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeSgsnSvaddressForControlplane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case TeidCIeType:
            {
                TeidCIe ieObject =
                dynamic_cast<
                TeidCIe&>(GtpV2IeFactory::getInstance().getIeObject(TeidCIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeTeidCIe(buffer, data.mmeSgsnSvTeidForControlPlane, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeSgsnSvTeidForControlPlane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case MsisdnIeType:
            {
                MsisdnIe ieObject =
                dynamic_cast<
                MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeMsisdnIe(buffer, data.cMsisdn, ieHeader.length);

                    data.cMsisdnIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: cMsisdn\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case TargetRncIdIeType:
            {
                TargetRncIdIe ieObject =
                dynamic_cast<
                TargetRncIdIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetRncIdIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeTargetRncIdIe(buffer, data.targetRncId, ieHeader.length);

                    data.targetRncIdIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: targetRncId\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case SvFlagsIeType:
            {
                SvFlagsIe ieObject =
                dynamic_cast<
                SvFlagsIe&>(GtpV2IeFactory::getInstance().getIeObject(SvFlagsIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeSvFlagsIe(buffer, data.svFlags, ieHeader.length);

                    data.svFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: svFlags\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case StnSrIeType:
            {
                StnSrIe ieObject =
                dynamic_cast<
                StnSrIe&>(GtpV2IeFactory::getInstance().getIeObject(StnSrIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeStnSrIe(buffer, data.stnSr, ieHeader.length);

                    data.stnSrIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: stnSr\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case MmContextForEutranSrvccIeType:
            {
                MmContextForEutranSrvccIe ieObject =
                dynamic_cast<
                MmContextForEutranSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextForEutranSrvccIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeMmContextForEutranSrvccIe(buffer, data.mmContextForEutranSrvcc, ieHeader.length);

                    data.mmContextForEutranSrvccIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmContextForEutranSrvcc\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case SourceToTargetTransparentContainerIeType:
            {
                SourceToTargetTransparentContainerIe ieObject =
                dynamic_cast<
                SourceToTargetTransparentContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceToTargetTransparentContainerIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeSourceToTargetTransparentContainerIe(buffer, data.sourceToTargetTransparentContainer, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sourceToTargetTransparentContainer\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }

            default:
            {
                // Unknown IE print error
                errorStream.add((char *)"Unknown IE Type: ");
                errorStream.add(ieHeader.ieType);
                errorStream.endOfLine();
                buffer.skipBytes(ieHeader.length);
            }
        }
    }
    return rc; // TODO validations
}

void SrvccPsToCsRequestMsg::
displaySrvccPsToCsRequestMsgData_v(SrvccPsToCsRequestMsgData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"SrvccPsToCsRequestMsg:");
    stream.endOfLine();
    stream.incrIndent();
        
    
    if (data.imsiIePresent)
    {


        stream.add((char *)"IE - imsi:");
        stream.endOfLine();
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        imsi.displayImsiIe_v(data.imsi, stream);

    }
    stream.add((char *)"IE - mmeSgsnSvaddressForControlplane:");
    stream.endOfLine();
    IpAddressIe mmeSgsnSvaddressForControlplane=
    dynamic_cast<
    IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
    mmeSgsnSvaddressForControlplane.displayIpAddressIe_v(data.mmeSgsnSvaddressForControlplane, stream);

    stream.add((char *)"IE - mmeSgsnSvTeidForControlPlane:");
    stream.endOfLine();
    TeidCIe mmeSgsnSvTeidForControlPlane=
    dynamic_cast<
    TeidCIe&>(GtpV2IeFactory::getInstance().getIeObject(TeidCIeType));
    mmeSgsnSvTeidForControlPlane.displayTeidCIe_v(data.mmeSgsnSvTeidForControlPlane, stream);

    if (data.cMsisdnIePresent)
    {


        stream.add((char *)"IE - cMsisdn:");
        stream.endOfLine();
        MsisdnIe cMsisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        cMsisdn.displayMsisdnIe_v(data.cMsisdn, stream);

    }
    if (data.targetRncIdIePresent)
    {


        stream.add((char *)"IE - targetRncId:");
        stream.endOfLine();
        TargetRncIdIe targetRncId=
        dynamic_cast<
        TargetRncIdIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetRncIdIeType));
        targetRncId.displayTargetRncIdIe_v(data.targetRncId, stream);

    }
    if (data.svFlagsIePresent)
    {


        stream.add((char *)"IE - svFlags:");
        stream.endOfLine();
        SvFlagsIe svFlags=
        dynamic_cast<
        SvFlagsIe&>(GtpV2IeFactory::getInstance().getIeObject(SvFlagsIeType));
        svFlags.displaySvFlagsIe_v(data.svFlags, stream);

    }
    if (data.stnSrIePresent)
    {


        stream.add((char *)"IE - stnSr:");
        stream.endOfLine();
        StnSrIe stnSr=
        dynamic_cast<
        StnSrIe&>(GtpV2IeFactory::getInstance().getIeObject(StnSrIeType));
        stnSr.displayStnSrIe_v(data.stnSr, stream);

    }
    if (data.mmContextForEutranSrvccIePresent)
    {


        stream.add((char *)"IE - mmContextForEutranSrvcc:");
        stream.endOfLine();
        MmContextForEutranSrvccIe mmContextForEutranSrvcc=
        dynamic_cast<
        MmContextForEutranSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextForEutranSrvccIeType));
        mmContextForEutranSrvcc.displayMmContextForEutranSrvccIe_v(data.mmContextForEutranSrvcc, stream);

    }
    stream.add((char *)"IE - sourceToTargetTransparentContainer:");
    stream.endOfLine();
    SourceToTargetTransparentContainerIe sourceToTargetTransparentContainer=
    dynamic_cast<
    SourceToTargetTransparentContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceToTargetTransparentContainerIeType));
    sourceToTargetTransparentContainer.displaySourceToTargetTransparentContainerIe_v(data.sourceToTargetTransparentContainer, stream);


    stream.decrIndent();
    stream.decrIndent();
}

