/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgtemplate.cpp.tt>
 ******************************************************************************/ 

#include "forwardRelocationResponseMsg.h"
#include "../ieClasses/manual/gtpV2Ie.h"
#include "../ieClasses/gtpV2IeFactory.h"
#include "../ieClasses/causeIe.h"
#include "../ieClasses/fTeidIe.h"
#include "../ieClasses/indicationIe.h"
#include "../ieClasses/bearerContextIe.h"
#include "../ieClasses/listOfSetUpBearersInForwardRelocationResponse.h"
#include "../ieClasses/bearerContextIe.h"
#include "../ieClasses/listOfRabsInForwardRelocationResponse.h"
#include "../ieClasses/fCauseIe.h"
#include "../ieClasses/fCauseIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/fContainerIe.h"
#include "../ieClasses/fContainerIe.h"
#include "../ieClasses/localDistinguishedNameIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/nodeNumberIe.h"
#include "../ieClasses/nodeIdentifierIe.h"
#include "../ieClasses/nodeIdentifierIe.h"

ForwardRelocationResponseMsg::ForwardRelocationResponseMsg()
{
    msgType = ForwardRelocationResponseMsgType;
    Uint16 mandIe;
    mandIe = CauseIeType;
    mandIe = (mandIe << 8) | 0; // cause
    mandatoryIeSet.insert(mandIe);
}

ForwardRelocationResponseMsg::~ForwardRelocationResponseMsg()
{

}

bool ForwardRelocationResponseMsg::encodeForwardRelocationResponseMsg(MsgBuffer &buffer,
                        ForwardRelocationResponseMsgData
							const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;

    
    // Encode the Ie Header
    header.ieType = CauseIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    CauseIe cause=
    dynamic_cast<
    CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));
    rc = cause.encodeCauseIe(buffer, data.cause);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: cause\n");
        return false;
    }

    if (data.senderFTeidForControlPlaneIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FTeidIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FTeidIe senderFTeidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        rc = senderFTeidForControlPlane.encodeFTeidIe(buffer, data.senderFTeidForControlPlane);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: senderFTeidForControlPlane\n");
            return false;
        }
    }

    if (data.indicationFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        rc = indicationFlags.encodeIndicationIe(buffer, data.indicationFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: indicationFlags\n");
            return false;
        }
    }

    // First validate if the applicatoin provided more than the expected cardinality
    if (data.listOfSetUpBearersCount > 11)
    {
        errorStream.add((char *)"Number of entries of listOfSetUpBearers exceeded\n");
        errorStream.add((char *)"Expected count: 11 Received count: ");
        errorStream.add((char *)"data.listOfSetUpBearersCount");
        errorStream.endOfLine();
        return false;
    }
    for (Uint8 i = 0; i < data.listOfSetUpBearersCount; i++)
    {
    	// Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe listOfSetUpBearers=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().
        getIeObject(BearerContextIeType));
        ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance = 
    	dynamic_cast<
    	ListOfSetUpBearersInForwardRelocationResponse&>(listOfSetUpBearers.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeListOfSetUpBearersInForwardRelocationResponse(buffer, data.listOfSetUpBearers[i]);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
    
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);
    }

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: listOfSetUpBearers\n");
        return false;
    }

    // First validate if the applicatoin provided more than the expected cardinality
    if (data.listOfRabsCount > 11)
    {
        errorStream.add((char *)"Number of entries of listOfRabs exceeded\n");
        errorStream.add((char *)"Expected count: 11 Received count: ");
        errorStream.add((char *)"data.listOfRabsCount");
        errorStream.endOfLine();
        return false;
    }
    for (Uint8 i = 0; i < data.listOfRabsCount; i++)
    {
    	// Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe listOfRabs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().
        getIeObject(BearerContextIeType));
        ListOfRabsInForwardRelocationResponse groupedIeInstance = 
    	dynamic_cast<
    	ListOfRabsInForwardRelocationResponse&>(listOfRabs.getGroupedIe(msgType, 1));
        rc = groupedIeInstance.encodeListOfRabsInForwardRelocationResponse(buffer, data.listOfRabs[i]);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
    
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);
    }

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: listOfRabs\n");
        return false;
    }

    if (data.s1ApCauseIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FCauseIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FCauseIe s1ApCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        rc = s1ApCause.encodeFCauseIe(buffer, data.s1ApCause);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: s1ApCause\n");
            return false;
        }
    }

    if (data.ranapCauseIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FCauseIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FCauseIe ranapCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        rc = ranapCause.encodeFCauseIe(buffer, data.ranapCause);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: ranapCause\n");
            return false;
        }
    }

    if (data.sgwNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe sgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = sgwNodeName.encodeFqdnIe(buffer, data.sgwNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgwNodeName\n");
            return false;
        }
    }

    if (data.eUtranTranparentContainerIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FContainerIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FContainerIe eUtranTranparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        rc = eUtranTranparentContainer.encodeFContainerIe(buffer, data.eUtranTranparentContainer);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: eUtranTranparentContainer\n");
            return false;
        }
    }

    if (data.utranTranparentContainerIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FContainerIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FContainerIe utranTranparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        rc = utranTranparentContainer.encodeFContainerIe(buffer, data.utranTranparentContainer);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: utranTranparentContainer\n");
            return false;
        }
    }

    if (data.mmeS4SgsnLdnIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = LocalDistinguishedNameIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        LocalDistinguishedNameIe mmeS4SgsnLdn=
        dynamic_cast<
        LocalDistinguishedNameIe&>(GtpV2IeFactory::getInstance().getIeObject(LocalDistinguishedNameIeType));
        rc = mmeS4SgsnLdn.encodeLocalDistinguishedNameIe(buffer, data.mmeS4SgsnLdn);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeS4SgsnLdn\n");
            return false;
        }
    }

    if (data.sgsnNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = sgsnNodeName.encodeFqdnIe(buffer, data.sgsnNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnNodeName\n");
            return false;
        }
    }

    if (data.mmeNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = mmeNodeName.encodeFqdnIe(buffer, data.mmeNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeNodeName\n");
            return false;
        }
    }

    if (data.sgsnNumberIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeNumberIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeNumberIe sgsnNumber=
        dynamic_cast<
        NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));
        rc = sgsnNumber.encodeNodeNumberIe(buffer, data.sgsnNumber);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnNumber\n");
            return false;
        }
    }

    if (data.sgsnIdentifierIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeIdentifierIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeIdentifierIe sgsnIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        rc = sgsnIdentifier.encodeNodeIdentifierIe(buffer, data.sgsnIdentifier);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnIdentifier\n");
            return false;
        }
    }

    if (data.mmeIdentifierIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeIdentifierIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeIdentifierIe mmeIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        rc = mmeIdentifier.encodeNodeIdentifierIe(buffer, data.mmeIdentifier);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeIdentifier\n");
            return false;
        }
    }
    return rc;

}

bool ForwardRelocationResponseMsg::decodeForwardRelocationResponseMsg(MsgBuffer &buffer,
 ForwardRelocationResponseMsgData 
 &data, Uint16 length)
{

    bool rc = false;
    GtpV2IeHeader ieHeader;
  
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while (buffer.lengthLeft() > IE_HEADER_SIZE)
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }

        switch (ieHeader.ieType){
     
            case CauseIeType:
            {
                CauseIe ieObject =
                dynamic_cast<
                CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeCauseIe(buffer, data.cause, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: cause\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FTeidIeType:
            {
                FTeidIe ieObject =
                dynamic_cast<
                FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFTeidIe(buffer, data.senderFTeidForControlPlane, ieHeader.length);

                    data.senderFTeidForControlPlaneIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: senderFTeidForControlPlane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IndicationIeType:
            {
                IndicationIe ieObject =
                dynamic_cast<
                IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIndicationIe(buffer, data.indicationFlags, ieHeader.length);

                    data.indicationFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: indicationFlags\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case BearerContextIeType:
            {
                BearerContextIe ieObject =
                dynamic_cast<
                BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));

                if(ieHeader.instance == 0)
                {
                    // First check if we have enough space left to decode and store this instance
                    if (data.listOfSetUpBearersCount == 11)
                    {
                        errorStream.add((char *)"More than 11 instances of listOfSetUpBearers received\n");
                    	return false;
                    }
                    ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance =
                    dynamic_cast<
                    ListOfSetUpBearersInForwardRelocationResponse&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeListOfSetUpBearersInForwardRelocationResponse(buffer,
                    data.listOfSetUpBearers[data.listOfSetUpBearersCount], ieHeader.length);
                    data.listOfSetUpBearersCount++; // TODO Count validation

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: listOfSetUpBearers\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    // First check if we have enough space left to decode and store this instance
                    if (data.listOfRabsCount == 11)
                    {
                        errorStream.add((char *)"More than 11 instances of listOfRabs received\n");
                    	return false;
                    }
                    ListOfRabsInForwardRelocationResponse groupedIeInstance =
                    dynamic_cast<
                    ListOfRabsInForwardRelocationResponse&>(ieObject.getGroupedIe(msgType, 1));
                    rc = groupedIeInstance.decodeListOfRabsInForwardRelocationResponse(buffer,
                    data.listOfRabs[data.listOfRabsCount], ieHeader.length);
                    data.listOfRabsCount++; // TODO Count validation

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: listOfRabs\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FCauseIeType:
            {
                FCauseIe ieObject =
                dynamic_cast<
                FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFCauseIe(buffer, data.s1ApCause, ieHeader.length);

                    data.s1ApCauseIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: s1ApCause\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFCauseIe(buffer, data.ranapCause, ieHeader.length);

                    data.ranapCauseIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ranapCause\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FqdnIeType:
            {
                FqdnIe ieObject =
                dynamic_cast<
                FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.sgwNodeName, ieHeader.length);

                    data.sgwNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgwNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.sgsnNodeName, ieHeader.length);

                    data.sgsnNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.mmeNodeName, ieHeader.length);

                    data.mmeNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeNodeName\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FContainerIeType:
            {
                FContainerIe ieObject =
                dynamic_cast<
                FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFContainerIe(buffer, data.eUtranTranparentContainer, ieHeader.length);

                    data.eUtranTranparentContainerIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: eUtranTranparentContainer\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFContainerIe(buffer, data.utranTranparentContainer, ieHeader.length);

                    data.utranTranparentContainerIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: utranTranparentContainer\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case LocalDistinguishedNameIeType:
            {
                LocalDistinguishedNameIe ieObject =
                dynamic_cast<
                LocalDistinguishedNameIe&>(GtpV2IeFactory::getInstance().getIeObject(LocalDistinguishedNameIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeLocalDistinguishedNameIe(buffer, data.mmeS4SgsnLdn, ieHeader.length);

                    data.mmeS4SgsnLdnIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeS4SgsnLdn\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case NodeNumberIeType:
            {
                NodeNumberIe ieObject =
                dynamic_cast<
                NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeNodeNumberIe(buffer, data.sgsnNumber, ieHeader.length);

                    data.sgsnNumberIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnNumber\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case NodeIdentifierIeType:
            {
                NodeIdentifierIe ieObject =
                dynamic_cast<
                NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeNodeIdentifierIe(buffer, data.sgsnIdentifier, ieHeader.length);

                    data.sgsnIdentifierIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnIdentifier\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeNodeIdentifierIe(buffer, data.mmeIdentifier, ieHeader.length);

                    data.mmeIdentifierIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeIdentifier\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }

            default:
            {
                // Unknown IE print error
                errorStream.add((char *)"Unknown IE Type: ");
                errorStream.add(ieHeader.ieType);
                errorStream.endOfLine();
                buffer.skipBytes(ieHeader.length);
            }
        }
    }
    return rc; // TODO validations
}

void ForwardRelocationResponseMsg::
displayForwardRelocationResponseMsgData_v(ForwardRelocationResponseMsgData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"ForwardRelocationResponseMsg:");
    stream.endOfLine();
    stream.incrIndent();
        
    
    stream.add((char *)"IE - cause:");
    stream.endOfLine();
    CauseIe cause=
    dynamic_cast<
    CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));
    cause.displayCauseIe_v(data.cause, stream);

    if (data.senderFTeidForControlPlaneIePresent)
    {


        stream.add((char *)"IE - senderFTeidForControlPlane:");
        stream.endOfLine();
        FTeidIe senderFTeidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        senderFTeidForControlPlane.displayFTeidIe_v(data.senderFTeidForControlPlane, stream);

    }
    if (data.indicationFlagsIePresent)
    {


        stream.add((char *)"IE - indicationFlags:");
        stream.endOfLine();
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        indicationFlags.displayIndicationIe_v(data.indicationFlags, stream);

    }

    Uint8 displayCount;
    
    displayCount = data.listOfSetUpBearersCount;
    if (displayCount > 11)
    {
        stream.add((char *)"Invalid data more than 11 instances");
        stream.endOfLine();
        stream.add((char *)"Displaying only 11");
        stream.endOfLine();
        displayCount = 11;
    }
    for (Uint8 i = 0; i < displayCount; i++)
    {
        stream.add((char *)"IE -  listOfSetUpBearers:");
        stream.endOfLine();
        BearerContextIe listOfSetUpBearers=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance =
        dynamic_cast<
        ListOfSetUpBearersInForwardRelocationResponse&>(listOfSetUpBearers.getGroupedIe(msgType, 0));
        groupedIeInstance.displayListOfSetUpBearersInForwardRelocationResponseData_v(data.listOfSetUpBearers[i], stream);
    }  
    displayCount = data.listOfRabsCount;
    if (displayCount > 11)
    {
        stream.add((char *)"Invalid data more than 11 instances");
        stream.endOfLine();
        stream.add((char *)"Displaying only 11");
        stream.endOfLine();
        displayCount = 11;
    }
    for (Uint8 i = 0; i < displayCount; i++)
    {
        stream.add((char *)"IE -  listOfRabs:");
        stream.endOfLine();
        BearerContextIe listOfRabs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        ListOfRabsInForwardRelocationResponse groupedIeInstance =
        dynamic_cast<
        ListOfRabsInForwardRelocationResponse&>(listOfRabs.getGroupedIe(msgType, 1));
        groupedIeInstance.displayListOfRabsInForwardRelocationResponseData_v(data.listOfRabs[i], stream);
    }  
    if (data.s1ApCauseIePresent)
    {


        stream.add((char *)"IE - s1ApCause:");
        stream.endOfLine();
        FCauseIe s1ApCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        s1ApCause.displayFCauseIe_v(data.s1ApCause, stream);

    }
    if (data.ranapCauseIePresent)
    {


        stream.add((char *)"IE - ranapCause:");
        stream.endOfLine();
        FCauseIe ranapCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        ranapCause.displayFCauseIe_v(data.ranapCause, stream);

    }
    if (data.sgwNodeNameIePresent)
    {


        stream.add((char *)"IE - sgwNodeName:");
        stream.endOfLine();
        FqdnIe sgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        sgwNodeName.displayFqdnIe_v(data.sgwNodeName, stream);

    }
    if (data.eUtranTranparentContainerIePresent)
    {


        stream.add((char *)"IE - eUtranTranparentContainer:");
        stream.endOfLine();
        FContainerIe eUtranTranparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        eUtranTranparentContainer.displayFContainerIe_v(data.eUtranTranparentContainer, stream);

    }
    if (data.utranTranparentContainerIePresent)
    {


        stream.add((char *)"IE - utranTranparentContainer:");
        stream.endOfLine();
        FContainerIe utranTranparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        utranTranparentContainer.displayFContainerIe_v(data.utranTranparentContainer, stream);

    }
    if (data.mmeS4SgsnLdnIePresent)
    {


        stream.add((char *)"IE - mmeS4SgsnLdn:");
        stream.endOfLine();
        LocalDistinguishedNameIe mmeS4SgsnLdn=
        dynamic_cast<
        LocalDistinguishedNameIe&>(GtpV2IeFactory::getInstance().getIeObject(LocalDistinguishedNameIeType));
        mmeS4SgsnLdn.displayLocalDistinguishedNameIe_v(data.mmeS4SgsnLdn, stream);

    }
    if (data.sgsnNodeNameIePresent)
    {


        stream.add((char *)"IE - sgsnNodeName:");
        stream.endOfLine();
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        sgsnNodeName.displayFqdnIe_v(data.sgsnNodeName, stream);

    }
    if (data.mmeNodeNameIePresent)
    {


        stream.add((char *)"IE - mmeNodeName:");
        stream.endOfLine();
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        mmeNodeName.displayFqdnIe_v(data.mmeNodeName, stream);

    }
    if (data.sgsnNumberIePresent)
    {


        stream.add((char *)"IE - sgsnNumber:");
        stream.endOfLine();
        NodeNumberIe sgsnNumber=
        dynamic_cast<
        NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));
        sgsnNumber.displayNodeNumberIe_v(data.sgsnNumber, stream);

    }
    if (data.sgsnIdentifierIePresent)
    {


        stream.add((char *)"IE - sgsnIdentifier:");
        stream.endOfLine();
        NodeIdentifierIe sgsnIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        sgsnIdentifier.displayNodeIdentifierIe_v(data.sgsnIdentifier, stream);

    }
    if (data.mmeIdentifierIePresent)
    {


        stream.add((char *)"IE - mmeIdentifier:");
        stream.endOfLine();
        NodeIdentifierIe mmeIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        mmeIdentifier.displayNodeIdentifierIe_v(data.mmeIdentifier, stream);

    }

    stream.decrIndent();
    stream.decrIndent();
}

