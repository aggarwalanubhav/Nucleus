/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgfactorytemplate.cpp.tt>
 ******************************************************************************/ 

#include "gtpV2MsgFactory.h"
#include "createSessionRequestMsg.h"
#include "createSessionResponseMsg.h"
#include "modifyBearerRequestMsg.h"
#include "modifyBearerResponseMsg.h"
#include "deleteSessionRequestMsg.h"
#include "deleteSessionResponseMsg.h"
#include "releaseAccessBearersRequestMsg.h"
#include "releaseAccessBearersResponseMsg.h"
#include "createBearerRequestMsg.h"
#include "createBearerResponseMsg.h"
#include "deleteBearerRequestMsg.h"
#include "deleteBearerResponseMsg.h"
#include "downlinkDataNotificationMsg.h"
#include "downlinkDataNotificationAcknowledgeMsg.h"
#include "downlinkDataNotificationFailureIndicationMsg.h"
#include "echoRequestMsg.h"
#include "echoResponseMsg.h"
#include "forwardRelocationCompleteNotificationMsg.h"
#include "forwardRelocationCompleteAcknowledgeMsg.h"
#include "forwardAccessContextNotificationMsg.h"
#include "forwardAccessContextAcknowledgeMsg.h"
#include "relocationCancelRequestMsg.h"
#include "relocationCancelResponseMsg.h"
#include "configurationTransferTunnelMsg.h"
#include "identificationRequestMsg.h"
#include "identificationResponseMsg.h"
#include "srvccPsToCsCompleteNotificationMsg.h"
#include "pstoCsCompleteAcknowledgeMsg.h"
#include "srvccPsToCsRequestMsg.h"
#include "srvccPsToCsResponseMsg.h"
#include "pstoCsCancelNotificationMsg.h"
#include "detachNotificationMsg.h"
#include "contextRequestMsg.h"
#include "contextResponseMsg.h"
#include "forwardRelocationResponseMsg.h"
#include "forwardRelocationRequestMsg.h"
#include "srvccPsToCsCancelAcknowledgeMsg.h"
#include "deleteBearerCommandMsg.h"

static GtpV2MsgFactory gtpV2MsgFactory;

GtpV2MsgFactory::GtpV2MsgFactory() 
{
    //Create Message Objects
        
    CreateSessionRequestMsg* createSessionRequestMsg_p = new (CreateSessionRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(CreateSessionRequestMsgType, createSessionRequestMsg_p));

    CreateSessionResponseMsg* createSessionResponseMsg_p = new (CreateSessionResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(CreateSessionResponseMsgType, createSessionResponseMsg_p));

    ModifyBearerRequestMsg* modifyBearerRequestMsg_p = new (ModifyBearerRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ModifyBearerRequestMsgType, modifyBearerRequestMsg_p));

    ModifyBearerResponseMsg* modifyBearerResponseMsg_p = new (ModifyBearerResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ModifyBearerResponseMsgType, modifyBearerResponseMsg_p));

    DeleteSessionRequestMsg* deleteSessionRequestMsg_p = new (DeleteSessionRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DeleteSessionRequestMsgType, deleteSessionRequestMsg_p));

    DeleteSessionResponseMsg* deleteSessionResponseMsg_p = new (DeleteSessionResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DeleteSessionResponseMsgType, deleteSessionResponseMsg_p));

    ReleaseAccessBearersRequestMsg* releaseAccessBearersRequestMsg_p = new (ReleaseAccessBearersRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ReleaseAccessBearersRequestMsgType, releaseAccessBearersRequestMsg_p));

    ReleaseAccessBearersResponseMsg* releaseAccessBearersResponseMsg_p = new (ReleaseAccessBearersResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ReleaseAccessBearersResponseMsgType, releaseAccessBearersResponseMsg_p));

    CreateBearerRequestMsg* createBearerRequestMsg_p = new (CreateBearerRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(CreateBearerRequestMsgType, createBearerRequestMsg_p));

    CreateBearerResponseMsg* createBearerResponseMsg_p = new (CreateBearerResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(CreateBearerResponseMsgType, createBearerResponseMsg_p));

    DeleteBearerRequestMsg* deleteBearerRequestMsg_p = new (DeleteBearerRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DeleteBearerRequestMsgType, deleteBearerRequestMsg_p));

    DeleteBearerResponseMsg* deleteBearerResponseMsg_p = new (DeleteBearerResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DeleteBearerResponseMsgType, deleteBearerResponseMsg_p));

    DownlinkDataNotificationMsg* downlinkDataNotificationMsg_p = new (DownlinkDataNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DownlinkDataNotificationMsgType, downlinkDataNotificationMsg_p));

    DownlinkDataNotificationAcknowledgeMsg* downlinkDataNotificationAcknowledgeMsg_p = new (DownlinkDataNotificationAcknowledgeMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DownlinkDataNotificationAcknowledgeMsgType, downlinkDataNotificationAcknowledgeMsg_p));

    DownlinkDataNotificationFailureIndicationMsg* downlinkDataNotificationFailureIndicationMsg_p = new (DownlinkDataNotificationFailureIndicationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DownlinkDataNotificationFailureIndicationMsgType, downlinkDataNotificationFailureIndicationMsg_p));

    EchoRequestMsg* echoRequestMsg_p = new (EchoRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(EchoRequestMsgType, echoRequestMsg_p));

    EchoResponseMsg* echoResponseMsg_p = new (EchoResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(EchoResponseMsgType, echoResponseMsg_p));

    ForwardRelocationCompleteNotificationMsg* forwardRelocationCompleteNotificationMsg_p = new (ForwardRelocationCompleteNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardRelocationCompleteNotificationMsgType, forwardRelocationCompleteNotificationMsg_p));

    ForwardRelocationCompleteAcknowledgeMsg* forwardRelocationCompleteAcknowledgeMsg_p = new (ForwardRelocationCompleteAcknowledgeMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardRelocationCompleteAcknowledgeMsgType, forwardRelocationCompleteAcknowledgeMsg_p));

    ForwardAccessContextNotificationMsg* forwardAccessContextNotificationMsg_p = new (ForwardAccessContextNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardAccessContextNotificationMsgType, forwardAccessContextNotificationMsg_p));

    ForwardAccessContextAcknowledgeMsg* forwardAccessContextAcknowledgeMsg_p = new (ForwardAccessContextAcknowledgeMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardAccessContextAcknowledgeMsgType, forwardAccessContextAcknowledgeMsg_p));

    RelocationCancelRequestMsg* relocationCancelRequestMsg_p = new (RelocationCancelRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(RelocationCancelRequestMsgType, relocationCancelRequestMsg_p));

    RelocationCancelResponseMsg* relocationCancelResponseMsg_p = new (RelocationCancelResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(RelocationCancelResponseMsgType, relocationCancelResponseMsg_p));

    ConfigurationTransferTunnelMsg* configurationTransferTunnelMsg_p = new (ConfigurationTransferTunnelMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ConfigurationTransferTunnelMsgType, configurationTransferTunnelMsg_p));

    IdentificationRequestMsg* identificationRequestMsg_p = new (IdentificationRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(IdentificationRequestMsgType, identificationRequestMsg_p));

    IdentificationResponseMsg* identificationResponseMsg_p = new (IdentificationResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(IdentificationResponseMsgType, identificationResponseMsg_p));

    SrvccPsToCsCompleteNotificationMsg* srvccPsToCsCompleteNotificationMsg_p = new (SrvccPsToCsCompleteNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(SrvccPsToCsCompleteNotificationMsgType, srvccPsToCsCompleteNotificationMsg_p));

    PstoCsCompleteAcknowledgeMsg* pstoCsCompleteAcknowledgeMsg_p = new (PstoCsCompleteAcknowledgeMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(PstoCsCompleteAcknowledgeMsgType, pstoCsCompleteAcknowledgeMsg_p));

    SrvccPsToCsRequestMsg* srvccPsToCsRequestMsg_p = new (SrvccPsToCsRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(SrvccPsToCsRequestMsgType, srvccPsToCsRequestMsg_p));

    SrvccPsToCsResponseMsg* srvccPsToCsResponseMsg_p = new (SrvccPsToCsResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(SrvccPsToCsResponseMsgType, srvccPsToCsResponseMsg_p));

    PstoCsCancelNotificationMsg* pstoCsCancelNotificationMsg_p = new (PstoCsCancelNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(PstoCsCancelNotificationMsgType, pstoCsCancelNotificationMsg_p));

    DetachNotificationMsg* detachNotificationMsg_p = new (DetachNotificationMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DetachNotificationMsgType, detachNotificationMsg_p));

    ContextRequestMsg* contextRequestMsg_p = new (ContextRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ContextRequestMsgType, contextRequestMsg_p));

    ContextResponseMsg* contextResponseMsg_p = new (ContextResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ContextResponseMsgType, contextResponseMsg_p));

    ForwardRelocationResponseMsg* forwardRelocationResponseMsg_p = new (ForwardRelocationResponseMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardRelocationResponseMsgType, forwardRelocationResponseMsg_p));

    ForwardRelocationRequestMsg* forwardRelocationRequestMsg_p = new (ForwardRelocationRequestMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(ForwardRelocationRequestMsgType, forwardRelocationRequestMsg_p));

    SrvccPsToCsCancelAcknowledgeMsg* srvccPsToCsCancelAcknowledgeMsg_p = new (SrvccPsToCsCancelAcknowledgeMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(SrvccPsToCsCancelAcknowledgeMsgType, srvccPsToCsCancelAcknowledgeMsg_p));

    DeleteBearerCommandMsg* deleteBearerCommandMsg_p = new (DeleteBearerCommandMsg);
    msgObjectContainer.insert(std::pair<Uint8, GtpV2Message*>(DeleteBearerCommandMsgType, deleteBearerCommandMsg_p));


}

GtpV2MsgFactory::~GtpV2MsgFactory() {
    // TODO clean up the allocated memory for message objects
}

GtpV2MsgFactory& GtpV2MsgFactory::getInstance()
{
    static GtpV2MsgFactory gtpV2MsgFactory;
    return gtpV2MsgFactory;
}

GtpV2Message& GtpV2MsgFactory::getMsgObject(Uint8 msgType)
{
    std::map<Uint8, GtpV2Message*>::iterator it;
    it = msgObjectContainer.find(msgType);
    return *(it->second);
}
