/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgtemplate.cpp.tt>
 ******************************************************************************/ 

#include "forwardRelocationRequestMsg.h"
#include "../ieClasses/manual/gtpV2Ie.h"
#include "../ieClasses/gtpV2IeFactory.h"
#include "../ieClasses/imsiIe.h"
#include "../ieClasses/fTeidIe.h"
#include "../ieClasses/fTeidIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/mmContextIe.h"
#include "../ieClasses/indicationIe.h"
#include "../ieClasses/targetIdentificationIe.h"
#include "../ieClasses/sourceIdentificationIe.h"
#include "../ieClasses/plmnIdIe.h"
#include "../ieClasses/fContainerIe.h"
#include "../ieClasses/fContainerIe.h"
#include "../ieClasses/fCauseIe.h"
#include "../ieClasses/fCauseIe.h"
#include "../ieClasses/servingNetworkIe.h"
#include "../ieClasses/additionalMmContextForSrvccIe.h"
#include "../ieClasses/additionalFlagsForSrvccIe.h"
#include "../ieClasses/msisdnIe.h"
#include "../ieClasses/msisdnIe.h"
#include "../ieClasses/portNumberIe.h"
#include "../ieClasses/traceInformationIe.h"
#include "../ieClasses/csgIdIe.h"
#include "../ieClasses/cmiIe.h"
#include "../ieClasses/integerNumberIe.h"
#include "../ieClasses/scefPdnConnectionIe.h"
#include "../ieClasses/mmeSgsnUeScefPdnConnectionsInForwardRelocationRequest.h"
#include "../ieClasses/pdnConnectionIe.h"
#include "../ieClasses/mmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest.h"

ForwardRelocationRequestMsg::ForwardRelocationRequestMsg()
{
    msgType = ForwardRelocationRequestMsgType;
    Uint16 mandIe;
    mandIe = FTeidIeType;
    mandIe = (mandIe << 8) | 0; // senderFTeidForControlPlane
    mandatoryIeSet.insert(mandIe);    mandIe = MmContextIeType;
    mandIe = (mandIe << 8) | 0; // mmeSgsnAmfUeMmContext
    mandatoryIeSet.insert(mandIe);
}

ForwardRelocationRequestMsg::~ForwardRelocationRequestMsg()
{

}

bool ForwardRelocationRequestMsg::encodeForwardRelocationRequestMsg(MsgBuffer &buffer,
                        ForwardRelocationRequestMsgData
							const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;

    if (data.imsiIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ImsiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        rc = imsi.encodeImsiIe(buffer, data.imsi);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: imsi\n");
            return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = FTeidIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    FTeidIe senderFTeidForControlPlane=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    rc = senderFTeidForControlPlane.encodeFTeidIe(buffer, data.senderFTeidForControlPlane);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: senderFTeidForControlPlane\n");
        return false;
    }

    if (data.sgwS11S4IpAddressAndTeidForControlPlaneIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FTeidIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FTeidIe sgwS11S4IpAddressAndTeidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        rc = sgwS11S4IpAddressAndTeidForControlPlane.encodeFTeidIe(buffer, data.sgwS11S4IpAddressAndTeidForControlPlane);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgwS11S4IpAddressAndTeidForControlPlane\n");
            return false;
        }
    }

    if (data.sgwNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe sgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = sgwNodeName.encodeFqdnIe(buffer, data.sgwNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgwNodeName\n");
            return false;
        }
    }

    if (data.sgsnNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = sgsnNodeName.encodeFqdnIe(buffer, data.sgsnNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnNodeName\n");
            return false;
        }
    }

    if (data.mmeNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 2;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = mmeNodeName.encodeFqdnIe(buffer, data.mmeNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeNodeName\n");
            return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = MmContextIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    MmContextIe mmeSgsnAmfUeMmContext=
    dynamic_cast<
    MmContextIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextIeType));
    rc = mmeSgsnAmfUeMmContext.encodeMmContextIe(buffer, data.mmeSgsnAmfUeMmContext);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: mmeSgsnAmfUeMmContext\n");
        return false;
    }

    if (data.indicationFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        rc = indicationFlags.encodeIndicationIe(buffer, data.indicationFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: indicationFlags\n");
            return false;
        }
    }

    if (data.targetIdentificationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = TargetIdentificationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        TargetIdentificationIe targetIdentification=
        dynamic_cast<
        TargetIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetIdentificationIeType));
        rc = targetIdentification.encodeTargetIdentificationIe(buffer, data.targetIdentification);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: targetIdentification\n");
            return false;
        }
    }

    if (data.sourceIdentificationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = SourceIdentificationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        SourceIdentificationIe sourceIdentification=
        dynamic_cast<
        SourceIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceIdentificationIeType));
        rc = sourceIdentification.encodeSourceIdentificationIe(buffer, data.sourceIdentification);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sourceIdentification\n");
            return false;
        }
    }

    if (data.selectedPlmnIdIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PlmnIdIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PlmnIdIe selectedPlmnId=
        dynamic_cast<
        PlmnIdIe&>(GtpV2IeFactory::getInstance().getIeObject(PlmnIdIeType));
        rc = selectedPlmnId.encodePlmnIdIe(buffer, data.selectedPlmnId);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: selectedPlmnId\n");
            return false;
        }
    }

    if (data.eUtranTransparentContainerIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FContainerIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FContainerIe eUtranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        rc = eUtranTransparentContainer.encodeFContainerIe(buffer, data.eUtranTransparentContainer);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: eUtranTransparentContainer\n");
            return false;
        }
    }

    if (data.utranTransparentContainerIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FContainerIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FContainerIe utranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        rc = utranTransparentContainer.encodeFContainerIe(buffer, data.utranTransparentContainer);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: utranTransparentContainer\n");
            return false;
        }
    }

    if (data.s1ApCauseIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FCauseIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FCauseIe s1ApCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        rc = s1ApCause.encodeFCauseIe(buffer, data.s1ApCause);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: s1ApCause\n");
            return false;
        }
    }

    if (data.ranapCauseIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FCauseIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FCauseIe ranapCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        rc = ranapCause.encodeFCauseIe(buffer, data.ranapCause);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: ranapCause\n");
            return false;
        }
    }

    if (data.servingNetworkIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ServingNetworkIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ServingNetworkIe servingNetwork=
        dynamic_cast<
        ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));
        rc = servingNetwork.encodeServingNetworkIe(buffer, data.servingNetwork);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: servingNetwork\n");
            return false;
        }
    }

    if (data.additionalMmContextForSrvccIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = AdditionalMmContextForSrvccIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        AdditionalMmContextForSrvccIe additionalMmContextForSrvcc=
        dynamic_cast<
        AdditionalMmContextForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalMmContextForSrvccIeType));
        rc = additionalMmContextForSrvcc.encodeAdditionalMmContextForSrvccIe(buffer, data.additionalMmContextForSrvcc);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: additionalMmContextForSrvcc\n");
            return false;
        }
    }

    if (data.additionalFlagsForSrvccIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = AdditionalFlagsForSrvccIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        AdditionalFlagsForSrvccIe additionalFlagsForSrvcc=
        dynamic_cast<
        AdditionalFlagsForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalFlagsForSrvccIeType));
        rc = additionalFlagsForSrvcc.encodeAdditionalFlagsForSrvccIe(buffer, data.additionalFlagsForSrvcc);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: additionalFlagsForSrvcc\n");
            return false;
        }
    }

    if (data.msisdnIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = MsisdnIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        MsisdnIe msisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        rc = msisdn.encodeMsisdnIe(buffer, data.msisdn);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: msisdn\n");
            return false;
        }
    }

    if (data.cMsisdnIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = MsisdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        MsisdnIe cMsisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        rc = cMsisdn.encodeMsisdnIe(buffer, data.cMsisdn);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: cMsisdn\n");
            return false;
        }
    }

    if (data.sourceUdpPortNumberIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PortNumberIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PortNumberIe sourceUdpPortNumber=
        dynamic_cast<
        PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));
        rc = sourceUdpPortNumber.encodePortNumberIe(buffer, data.sourceUdpPortNumber);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sourceUdpPortNumber\n");
            return false;
        }
    }

    if (data.traceInformationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = TraceInformationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        TraceInformationIe traceInformation=
        dynamic_cast<
        TraceInformationIe&>(GtpV2IeFactory::getInstance().getIeObject(TraceInformationIeType));
        rc = traceInformation.encodeTraceInformationIe(buffer, data.traceInformation);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: traceInformation\n");
            return false;
        }
    }

    if (data.csgIdIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = CsgIdIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        CsgIdIe csgId=
        dynamic_cast<
        CsgIdIe&>(GtpV2IeFactory::getInstance().getIeObject(CsgIdIeType));
        rc = csgId.encodeCsgIdIe(buffer, data.csgId);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: csgId\n");
            return false;
        }
    }

    if (data.csgMembershipIndicationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = CmiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        CmiIe csgMembershipIndication=
        dynamic_cast<
        CmiIe&>(GtpV2IeFactory::getInstance().getIeObject(CmiIeType));
        rc = csgMembershipIndication.encodeCmiIe(buffer, data.csgMembershipIndication);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: csgMembershipIndication\n");
            return false;
        }
    }

    if (data.ueUsageTypeIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IntegerNumberIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IntegerNumberIe ueUsageType=
        dynamic_cast<
        IntegerNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(IntegerNumberIeType));
        rc = ueUsageType.encodeIntegerNumberIe(buffer, data.ueUsageType);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: ueUsageType\n");
            return false;
        }
    }

    if (data.mmeSgsnUeScefPdnConnectionsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ScefPdnConnectionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ScefPdnConnectionIe mmeSgsnUeScefPdnConnections=
        dynamic_cast<
        ScefPdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(ScefPdnConnectionIeType));
        MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest&>(mmeSgsnUeScefPdnConnections.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeMmeSgsnUeScefPdnConnectionsInForwardRelocationRequest(buffer, data.mmeSgsnUeScefPdnConnections);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeSgsnUeScefPdnConnections\n");
            return false;
        }
    }

    if (data.mmeSgsnAmfUeEpsPdnConnectionsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PdnConnectionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PdnConnectionIe mmeSgsnAmfUeEpsPdnConnections=
        dynamic_cast<
        PdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(PdnConnectionIeType));
        MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest&>(mmeSgsnAmfUeEpsPdnConnections.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest(buffer, data.mmeSgsnAmfUeEpsPdnConnections);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeSgsnAmfUeEpsPdnConnections\n");
            return false;
        }
    }
    return rc;

}

bool ForwardRelocationRequestMsg::decodeForwardRelocationRequestMsg(MsgBuffer &buffer,
 ForwardRelocationRequestMsgData 
 &data, Uint16 length)
{

    bool rc = false;
    GtpV2IeHeader ieHeader;
  
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while (buffer.lengthLeft() > IE_HEADER_SIZE)
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }

        switch (ieHeader.ieType){
     
            case ImsiIeType:
            {
                ImsiIe ieObject =
                dynamic_cast<
                ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeImsiIe(buffer, data.imsi, ieHeader.length);

                    data.imsiIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: imsi\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FTeidIeType:
            {
                FTeidIe ieObject =
                dynamic_cast<
                FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFTeidIe(buffer, data.senderFTeidForControlPlane, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: senderFTeidForControlPlane\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFTeidIe(buffer, data.sgwS11S4IpAddressAndTeidForControlPlane, ieHeader.length);

                    data.sgwS11S4IpAddressAndTeidForControlPlaneIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgwS11S4IpAddressAndTeidForControlPlane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FqdnIeType:
            {
                FqdnIe ieObject =
                dynamic_cast<
                FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.sgwNodeName, ieHeader.length);

                    data.sgwNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgwNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.sgsnNodeName, ieHeader.length);

                    data.sgsnNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 2)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.mmeNodeName, ieHeader.length);

                    data.mmeNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeNodeName\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case MmContextIeType:
            {
                MmContextIe ieObject =
                dynamic_cast<
                MmContextIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeMmContextIe(buffer, data.mmeSgsnAmfUeMmContext, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeSgsnAmfUeMmContext\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IndicationIeType:
            {
                IndicationIe ieObject =
                dynamic_cast<
                IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIndicationIe(buffer, data.indicationFlags, ieHeader.length);

                    data.indicationFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: indicationFlags\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case TargetIdentificationIeType:
            {
                TargetIdentificationIe ieObject =
                dynamic_cast<
                TargetIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetIdentificationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeTargetIdentificationIe(buffer, data.targetIdentification, ieHeader.length);

                    data.targetIdentificationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: targetIdentification\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case SourceIdentificationIeType:
            {
                SourceIdentificationIe ieObject =
                dynamic_cast<
                SourceIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceIdentificationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeSourceIdentificationIe(buffer, data.sourceIdentification, ieHeader.length);

                    data.sourceIdentificationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sourceIdentification\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PlmnIdIeType:
            {
                PlmnIdIe ieObject =
                dynamic_cast<
                PlmnIdIe&>(GtpV2IeFactory::getInstance().getIeObject(PlmnIdIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodePlmnIdIe(buffer, data.selectedPlmnId, ieHeader.length);

                    data.selectedPlmnIdIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: selectedPlmnId\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FContainerIeType:
            {
                FContainerIe ieObject =
                dynamic_cast<
                FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));

                if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFContainerIe(buffer, data.eUtranTransparentContainer, ieHeader.length);

                    data.eUtranTransparentContainerIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: eUtranTransparentContainer\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFContainerIe(buffer, data.utranTransparentContainer, ieHeader.length);

                    data.utranTransparentContainerIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: utranTransparentContainer\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FCauseIeType:
            {
                FCauseIe ieObject =
                dynamic_cast<
                FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFCauseIe(buffer, data.s1ApCause, ieHeader.length);

                    data.s1ApCauseIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: s1ApCause\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFCauseIe(buffer, data.ranapCause, ieHeader.length);

                    data.ranapCauseIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ranapCause\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case ServingNetworkIeType:
            {
                ServingNetworkIe ieObject =
                dynamic_cast<
                ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeServingNetworkIe(buffer, data.servingNetwork, ieHeader.length);

                    data.servingNetworkIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: servingNetwork\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case AdditionalMmContextForSrvccIeType:
            {
                AdditionalMmContextForSrvccIe ieObject =
                dynamic_cast<
                AdditionalMmContextForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalMmContextForSrvccIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeAdditionalMmContextForSrvccIe(buffer, data.additionalMmContextForSrvcc, ieHeader.length);

                    data.additionalMmContextForSrvccIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: additionalMmContextForSrvcc\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case AdditionalFlagsForSrvccIeType:
            {
                AdditionalFlagsForSrvccIe ieObject =
                dynamic_cast<
                AdditionalFlagsForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalFlagsForSrvccIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeAdditionalFlagsForSrvccIe(buffer, data.additionalFlagsForSrvcc, ieHeader.length);

                    data.additionalFlagsForSrvccIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: additionalFlagsForSrvcc\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case MsisdnIeType:
            {
                MsisdnIe ieObject =
                dynamic_cast<
                MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));

                if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeMsisdnIe(buffer, data.msisdn, ieHeader.length);

                    data.msisdnIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: msisdn\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeMsisdnIe(buffer, data.cMsisdn, ieHeader.length);

                    data.cMsisdnIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: cMsisdn\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PortNumberIeType:
            {
                PortNumberIe ieObject =
                dynamic_cast<
                PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodePortNumberIe(buffer, data.sourceUdpPortNumber, ieHeader.length);

                    data.sourceUdpPortNumberIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sourceUdpPortNumber\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case TraceInformationIeType:
            {
                TraceInformationIe ieObject =
                dynamic_cast<
                TraceInformationIe&>(GtpV2IeFactory::getInstance().getIeObject(TraceInformationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeTraceInformationIe(buffer, data.traceInformation, ieHeader.length);

                    data.traceInformationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: traceInformation\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case CsgIdIeType:
            {
                CsgIdIe ieObject =
                dynamic_cast<
                CsgIdIe&>(GtpV2IeFactory::getInstance().getIeObject(CsgIdIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeCsgIdIe(buffer, data.csgId, ieHeader.length);

                    data.csgIdIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: csgId\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case CmiIeType:
            {
                CmiIe ieObject =
                dynamic_cast<
                CmiIe&>(GtpV2IeFactory::getInstance().getIeObject(CmiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeCmiIe(buffer, data.csgMembershipIndication, ieHeader.length);

                    data.csgMembershipIndicationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: csgMembershipIndication\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IntegerNumberIeType:
            {
                IntegerNumberIe ieObject =
                dynamic_cast<
                IntegerNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(IntegerNumberIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIntegerNumberIe(buffer, data.ueUsageType, ieHeader.length);

                    data.ueUsageTypeIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ueUsageType\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case ScefPdnConnectionIeType:
            {
                ScefPdnConnectionIe ieObject =
                dynamic_cast<
                ScefPdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(ScefPdnConnectionIeType));

                if(ieHeader.instance == 0)
                {
                    MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest groupedIeInstance =
                    dynamic_cast<
                    MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeMmeSgsnUeScefPdnConnectionsInForwardRelocationRequest(buffer, data.mmeSgsnUeScefPdnConnections, ieHeader.length);

                    data.mmeSgsnUeScefPdnConnectionsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeSgsnUeScefPdnConnections\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PdnConnectionIeType:
            {
                PdnConnectionIe ieObject =
                dynamic_cast<
                PdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(PdnConnectionIeType));

                if(ieHeader.instance == 0)
                {
                    MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest groupedIeInstance =
                    dynamic_cast<
                    MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest(buffer, data.mmeSgsnAmfUeEpsPdnConnections, ieHeader.length);

                    data.mmeSgsnAmfUeEpsPdnConnectionsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeSgsnAmfUeEpsPdnConnections\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }

            default:
            {
                // Unknown IE print error
                errorStream.add((char *)"Unknown IE Type: ");
                errorStream.add(ieHeader.ieType);
                errorStream.endOfLine();
                buffer.skipBytes(ieHeader.length);
            }
        }
    }
    return rc; // TODO validations
}

void ForwardRelocationRequestMsg::
displayForwardRelocationRequestMsgData_v(ForwardRelocationRequestMsgData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"ForwardRelocationRequestMsg:");
    stream.endOfLine();
    stream.incrIndent();
        
    
    if (data.imsiIePresent)
    {


        stream.add((char *)"IE - imsi:");
        stream.endOfLine();
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        imsi.displayImsiIe_v(data.imsi, stream);

    }
    stream.add((char *)"IE - senderFTeidForControlPlane:");
    stream.endOfLine();
    FTeidIe senderFTeidForControlPlane=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    senderFTeidForControlPlane.displayFTeidIe_v(data.senderFTeidForControlPlane, stream);

    if (data.sgwS11S4IpAddressAndTeidForControlPlaneIePresent)
    {


        stream.add((char *)"IE - sgwS11S4IpAddressAndTeidForControlPlane:");
        stream.endOfLine();
        FTeidIe sgwS11S4IpAddressAndTeidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        sgwS11S4IpAddressAndTeidForControlPlane.displayFTeidIe_v(data.sgwS11S4IpAddressAndTeidForControlPlane, stream);

    }
    if (data.sgwNodeNameIePresent)
    {


        stream.add((char *)"IE - sgwNodeName:");
        stream.endOfLine();
        FqdnIe sgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        sgwNodeName.displayFqdnIe_v(data.sgwNodeName, stream);

    }
    if (data.sgsnNodeNameIePresent)
    {


        stream.add((char *)"IE - sgsnNodeName:");
        stream.endOfLine();
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        sgsnNodeName.displayFqdnIe_v(data.sgsnNodeName, stream);

    }
    if (data.mmeNodeNameIePresent)
    {


        stream.add((char *)"IE - mmeNodeName:");
        stream.endOfLine();
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        mmeNodeName.displayFqdnIe_v(data.mmeNodeName, stream);

    }
    stream.add((char *)"IE - mmeSgsnAmfUeMmContext:");
    stream.endOfLine();
    MmContextIe mmeSgsnAmfUeMmContext=
    dynamic_cast<
    MmContextIe&>(GtpV2IeFactory::getInstance().getIeObject(MmContextIeType));
    mmeSgsnAmfUeMmContext.displayMmContextIe_v(data.mmeSgsnAmfUeMmContext, stream);

    if (data.indicationFlagsIePresent)
    {


        stream.add((char *)"IE - indicationFlags:");
        stream.endOfLine();
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        indicationFlags.displayIndicationIe_v(data.indicationFlags, stream);

    }
    if (data.targetIdentificationIePresent)
    {


        stream.add((char *)"IE - targetIdentification:");
        stream.endOfLine();
        TargetIdentificationIe targetIdentification=
        dynamic_cast<
        TargetIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(TargetIdentificationIeType));
        targetIdentification.displayTargetIdentificationIe_v(data.targetIdentification, stream);

    }
    if (data.sourceIdentificationIePresent)
    {


        stream.add((char *)"IE - sourceIdentification:");
        stream.endOfLine();
        SourceIdentificationIe sourceIdentification=
        dynamic_cast<
        SourceIdentificationIe&>(GtpV2IeFactory::getInstance().getIeObject(SourceIdentificationIeType));
        sourceIdentification.displaySourceIdentificationIe_v(data.sourceIdentification, stream);

    }
    if (data.selectedPlmnIdIePresent)
    {


        stream.add((char *)"IE - selectedPlmnId:");
        stream.endOfLine();
        PlmnIdIe selectedPlmnId=
        dynamic_cast<
        PlmnIdIe&>(GtpV2IeFactory::getInstance().getIeObject(PlmnIdIeType));
        selectedPlmnId.displayPlmnIdIe_v(data.selectedPlmnId, stream);

    }
    if (data.eUtranTransparentContainerIePresent)
    {


        stream.add((char *)"IE - eUtranTransparentContainer:");
        stream.endOfLine();
        FContainerIe eUtranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        eUtranTransparentContainer.displayFContainerIe_v(data.eUtranTransparentContainer, stream);

    }
    if (data.utranTransparentContainerIePresent)
    {


        stream.add((char *)"IE - utranTransparentContainer:");
        stream.endOfLine();
        FContainerIe utranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        utranTransparentContainer.displayFContainerIe_v(data.utranTransparentContainer, stream);

    }
    if (data.s1ApCauseIePresent)
    {


        stream.add((char *)"IE - s1ApCause:");
        stream.endOfLine();
        FCauseIe s1ApCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        s1ApCause.displayFCauseIe_v(data.s1ApCause, stream);

    }
    if (data.ranapCauseIePresent)
    {


        stream.add((char *)"IE - ranapCause:");
        stream.endOfLine();
        FCauseIe ranapCause=
        dynamic_cast<
        FCauseIe&>(GtpV2IeFactory::getInstance().getIeObject(FCauseIeType));
        ranapCause.displayFCauseIe_v(data.ranapCause, stream);

    }
    if (data.servingNetworkIePresent)
    {


        stream.add((char *)"IE - servingNetwork:");
        stream.endOfLine();
        ServingNetworkIe servingNetwork=
        dynamic_cast<
        ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));
        servingNetwork.displayServingNetworkIe_v(data.servingNetwork, stream);

    }
    if (data.additionalMmContextForSrvccIePresent)
    {


        stream.add((char *)"IE - additionalMmContextForSrvcc:");
        stream.endOfLine();
        AdditionalMmContextForSrvccIe additionalMmContextForSrvcc=
        dynamic_cast<
        AdditionalMmContextForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalMmContextForSrvccIeType));
        additionalMmContextForSrvcc.displayAdditionalMmContextForSrvccIe_v(data.additionalMmContextForSrvcc, stream);

    }
    if (data.additionalFlagsForSrvccIePresent)
    {


        stream.add((char *)"IE - additionalFlagsForSrvcc:");
        stream.endOfLine();
        AdditionalFlagsForSrvccIe additionalFlagsForSrvcc=
        dynamic_cast<
        AdditionalFlagsForSrvccIe&>(GtpV2IeFactory::getInstance().getIeObject(AdditionalFlagsForSrvccIeType));
        additionalFlagsForSrvcc.displayAdditionalFlagsForSrvccIe_v(data.additionalFlagsForSrvcc, stream);

    }
    if (data.msisdnIePresent)
    {


        stream.add((char *)"IE - msisdn:");
        stream.endOfLine();
        MsisdnIe msisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        msisdn.displayMsisdnIe_v(data.msisdn, stream);

    }
    if (data.cMsisdnIePresent)
    {


        stream.add((char *)"IE - cMsisdn:");
        stream.endOfLine();
        MsisdnIe cMsisdn=
        dynamic_cast<
        MsisdnIe&>(GtpV2IeFactory::getInstance().getIeObject(MsisdnIeType));
        cMsisdn.displayMsisdnIe_v(data.cMsisdn, stream);

    }
    if (data.sourceUdpPortNumberIePresent)
    {


        stream.add((char *)"IE - sourceUdpPortNumber:");
        stream.endOfLine();
        PortNumberIe sourceUdpPortNumber=
        dynamic_cast<
        PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));
        sourceUdpPortNumber.displayPortNumberIe_v(data.sourceUdpPortNumber, stream);

    }
    if (data.traceInformationIePresent)
    {


        stream.add((char *)"IE - traceInformation:");
        stream.endOfLine();
        TraceInformationIe traceInformation=
        dynamic_cast<
        TraceInformationIe&>(GtpV2IeFactory::getInstance().getIeObject(TraceInformationIeType));
        traceInformation.displayTraceInformationIe_v(data.traceInformation, stream);

    }
    if (data.csgIdIePresent)
    {


        stream.add((char *)"IE - csgId:");
        stream.endOfLine();
        CsgIdIe csgId=
        dynamic_cast<
        CsgIdIe&>(GtpV2IeFactory::getInstance().getIeObject(CsgIdIeType));
        csgId.displayCsgIdIe_v(data.csgId, stream);

    }
    if (data.csgMembershipIndicationIePresent)
    {


        stream.add((char *)"IE - csgMembershipIndication:");
        stream.endOfLine();
        CmiIe csgMembershipIndication=
        dynamic_cast<
        CmiIe&>(GtpV2IeFactory::getInstance().getIeObject(CmiIeType));
        csgMembershipIndication.displayCmiIe_v(data.csgMembershipIndication, stream);

    }
    if (data.ueUsageTypeIePresent)
    {


        stream.add((char *)"IE - ueUsageType:");
        stream.endOfLine();
        IntegerNumberIe ueUsageType=
        dynamic_cast<
        IntegerNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(IntegerNumberIeType));
        ueUsageType.displayIntegerNumberIe_v(data.ueUsageType, stream);

    }
    if (data.mmeSgsnUeScefPdnConnectionsIePresent)
    {


        stream.add((char *)"IE - mmeSgsnUeScefPdnConnections:");
        stream.endOfLine();
        ScefPdnConnectionIe mmeSgsnUeScefPdnConnections=
        dynamic_cast<
        ScefPdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(ScefPdnConnectionIeType));
        MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        MmeSgsnUeScefPdnConnectionsInForwardRelocationRequest&>(mmeSgsnUeScefPdnConnections.getGroupedIe(msgType, 0));
        groupedIeInstance.displayMmeSgsnUeScefPdnConnectionsInForwardRelocationRequestData_v(data.mmeSgsnUeScefPdnConnections, stream);
    }
    if (data.mmeSgsnAmfUeEpsPdnConnectionsIePresent)
    {


        stream.add((char *)"IE - mmeSgsnAmfUeEpsPdnConnections:");
        stream.endOfLine();
        PdnConnectionIe mmeSgsnAmfUeEpsPdnConnections=
        dynamic_cast<
        PdnConnectionIe&>(GtpV2IeFactory::getInstance().getIeObject(PdnConnectionIeType));
        MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest&>(mmeSgsnAmfUeEpsPdnConnections.getGroupedIe(msgType, 0));
        groupedIeInstance.displayMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequestData_v(data.mmeSgsnAmfUeEpsPdnConnections, stream);
    }

    stream.decrIndent();
    stream.decrIndent();
}

