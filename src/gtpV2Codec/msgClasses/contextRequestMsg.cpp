/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgtemplate.cpp.tt>
 ******************************************************************************/ 

#include "contextRequestMsg.h"
#include "../ieClasses/manual/gtpV2Ie.h"
#include "../ieClasses/gtpV2IeFactory.h"
#include "../ieClasses/imsiIe.h"
#include "../ieClasses/gutiIe.h"
#include "../ieClasses/uliIe.h"
#include "../ieClasses/pTmsiIe.h"
#include "../ieClasses/pTmsiSignatureIe.h"
#include "../ieClasses/completeRequestMessageIe.h"
#include "../ieClasses/fTeidIe.h"
#include "../ieClasses/portNumberIe.h"
#include "../ieClasses/ratTypeIe.h"
#include "../ieClasses/indicationIe.h"
#include "../ieClasses/servingNetworkIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/fqdnIe.h"
#include "../ieClasses/nodeNumberIe.h"
#include "../ieClasses/nodeIdentifierIe.h"
#include "../ieClasses/nodeIdentifierIe.h"

ContextRequestMsg::ContextRequestMsg()
{
    msgType = ContextRequestMsgType;

}

ContextRequestMsg::~ContextRequestMsg()
{

}

bool ContextRequestMsg::encodeContextRequestMsg(MsgBuffer &buffer,
                        ContextRequestMsgData
							const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;

    if (data.imsiIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ImsiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        rc = imsi.encodeImsiIe(buffer, data.imsi);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: imsi\n");
            return false;
        }
    }

    if (data.gutiIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = GutiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        GutiIe guti=
        dynamic_cast<
        GutiIe&>(GtpV2IeFactory::getInstance().getIeObject(GutiIeType));
        rc = guti.encodeGutiIe(buffer, data.guti);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: guti\n");
            return false;
        }
    }

    if (data.routeingAreaIdentityIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = UliIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        UliIe routeingAreaIdentity=
        dynamic_cast<
        UliIe&>(GtpV2IeFactory::getInstance().getIeObject(UliIeType));
        rc = routeingAreaIdentity.encodeUliIe(buffer, data.routeingAreaIdentity);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: routeingAreaIdentity\n");
            return false;
        }
    }

    if (data.packetTmsiIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PTmsiIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PTmsiIe packetTmsi=
        dynamic_cast<
        PTmsiIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiIeType));
        rc = packetTmsi.encodePTmsiIe(buffer, data.packetTmsi);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: packetTmsi\n");
            return false;
        }
    }

    if (data.pTmsiSignatureIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PTmsiSignatureIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PTmsiSignatureIe pTmsiSignature=
        dynamic_cast<
        PTmsiSignatureIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiSignatureIeType));
        rc = pTmsiSignature.encodePTmsiSignatureIe(buffer, data.pTmsiSignature);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: pTmsiSignature\n");
            return false;
        }
    }

    if (data.completeTauRequestMessageIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = CompleteRequestMessageIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        CompleteRequestMessageIe completeTauRequestMessage=
        dynamic_cast<
        CompleteRequestMessageIe&>(GtpV2IeFactory::getInstance().getIeObject(CompleteRequestMessageIeType));
        rc = completeTauRequestMessage.encodeCompleteRequestMessageIe(buffer, data.completeTauRequestMessage);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: completeTauRequestMessage\n");
            return false;
        }
    }

    if (data.teidForControlPlaneIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FTeidIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FTeidIe teidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        rc = teidForControlPlane.encodeFTeidIe(buffer, data.teidForControlPlane);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: teidForControlPlane\n");
            return false;
        }
    }

    if (data.udpSourcePortNumberIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PortNumberIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PortNumberIe udpSourcePortNumber=
        dynamic_cast<
        PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));
        rc = udpSourcePortNumber.encodePortNumberIe(buffer, data.udpSourcePortNumber);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: udpSourcePortNumber\n");
            return false;
        }
    }

    if (data.ratTypeIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = RatTypeIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        RatTypeIe ratType=
        dynamic_cast<
        RatTypeIe&>(GtpV2IeFactory::getInstance().getIeObject(RatTypeIeType));
        rc = ratType.encodeRatTypeIe(buffer, data.ratType);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: ratType\n");
            return false;
        }
    }

    if (data.indicationFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        rc = indicationFlags.encodeIndicationIe(buffer, data.indicationFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: indicationFlags\n");
            return false;
        }
    }

    if (data.targetPlmnIdIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ServingNetworkIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ServingNetworkIe targetPlmnId=
        dynamic_cast<
        ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));
        rc = targetPlmnId.encodeServingNetworkIe(buffer, data.targetPlmnId);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: targetPlmnId\n");
            return false;
        }
    }

    if (data.sgsnNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = sgsnNodeName.encodeFqdnIe(buffer, data.sgsnNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnNodeName\n");
            return false;
        }
    }

    if (data.mmeNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = mmeNodeName.encodeFqdnIe(buffer, data.mmeNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeNodeName\n");
            return false;
        }
    }

    if (data.sgsnNumberIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeNumberIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeNumberIe sgsnNumber=
        dynamic_cast<
        NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));
        rc = sgsnNumber.encodeNodeNumberIe(buffer, data.sgsnNumber);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnNumber\n");
            return false;
        }
    }

    if (data.sgsnIdentifierIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeIdentifierIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeIdentifierIe sgsnIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        rc = sgsnIdentifier.encodeNodeIdentifierIe(buffer, data.sgsnIdentifier);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: sgsnIdentifier\n");
            return false;
        }
    }

    if (data.mmeIdentifierIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = NodeIdentifierIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        NodeIdentifierIe mmeIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        rc = mmeIdentifier.encodeNodeIdentifierIe(buffer, data.mmeIdentifier);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: mmeIdentifier\n");
            return false;
        }
    }
    return rc;

}

bool ContextRequestMsg::decodeContextRequestMsg(MsgBuffer &buffer,
 ContextRequestMsgData 
 &data, Uint16 length)
{

    bool rc = false;
    GtpV2IeHeader ieHeader;
  
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while (buffer.lengthLeft() > IE_HEADER_SIZE)
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }

        switch (ieHeader.ieType){
     
            case ImsiIeType:
            {
                ImsiIe ieObject =
                dynamic_cast<
                ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeImsiIe(buffer, data.imsi, ieHeader.length);

                    data.imsiIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: imsi\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case GutiIeType:
            {
                GutiIe ieObject =
                dynamic_cast<
                GutiIe&>(GtpV2IeFactory::getInstance().getIeObject(GutiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeGutiIe(buffer, data.guti, ieHeader.length);

                    data.gutiIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: guti\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case UliIeType:
            {
                UliIe ieObject =
                dynamic_cast<
                UliIe&>(GtpV2IeFactory::getInstance().getIeObject(UliIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeUliIe(buffer, data.routeingAreaIdentity, ieHeader.length);

                    data.routeingAreaIdentityIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: routeingAreaIdentity\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PTmsiIeType:
            {
                PTmsiIe ieObject =
                dynamic_cast<
                PTmsiIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodePTmsiIe(buffer, data.packetTmsi, ieHeader.length);

                    data.packetTmsiIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: packetTmsi\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PTmsiSignatureIeType:
            {
                PTmsiSignatureIe ieObject =
                dynamic_cast<
                PTmsiSignatureIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiSignatureIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodePTmsiSignatureIe(buffer, data.pTmsiSignature, ieHeader.length);

                    data.pTmsiSignatureIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: pTmsiSignature\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case CompleteRequestMessageIeType:
            {
                CompleteRequestMessageIe ieObject =
                dynamic_cast<
                CompleteRequestMessageIe&>(GtpV2IeFactory::getInstance().getIeObject(CompleteRequestMessageIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeCompleteRequestMessageIe(buffer, data.completeTauRequestMessage, ieHeader.length);

                    data.completeTauRequestMessageIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: completeTauRequestMessage\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FTeidIeType:
            {
                FTeidIe ieObject =
                dynamic_cast<
                FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFTeidIe(buffer, data.teidForControlPlane, ieHeader.length);

                    data.teidForControlPlaneIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: teidForControlPlane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case PortNumberIeType:
            {
                PortNumberIe ieObject =
                dynamic_cast<
                PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodePortNumberIe(buffer, data.udpSourcePortNumber, ieHeader.length);

                    data.udpSourcePortNumberIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: udpSourcePortNumber\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case RatTypeIeType:
            {
                RatTypeIe ieObject =
                dynamic_cast<
                RatTypeIe&>(GtpV2IeFactory::getInstance().getIeObject(RatTypeIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeRatTypeIe(buffer, data.ratType, ieHeader.length);

                    data.ratTypeIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ratType\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IndicationIeType:
            {
                IndicationIe ieObject =
                dynamic_cast<
                IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIndicationIe(buffer, data.indicationFlags, ieHeader.length);

                    data.indicationFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: indicationFlags\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case ServingNetworkIeType:
            {
                ServingNetworkIe ieObject =
                dynamic_cast<
                ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeServingNetworkIe(buffer, data.targetPlmnId, ieHeader.length);

                    data.targetPlmnIdIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: targetPlmnId\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FqdnIeType:
            {
                FqdnIe ieObject =
                dynamic_cast<
                FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.sgsnNodeName, ieHeader.length);

                    data.sgsnNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeFqdnIe(buffer, data.mmeNodeName, ieHeader.length);

                    data.mmeNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeNodeName\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case NodeNumberIeType:
            {
                NodeNumberIe ieObject =
                dynamic_cast<
                NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeNodeNumberIe(buffer, data.sgsnNumber, ieHeader.length);

                    data.sgsnNumberIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnNumber\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case NodeIdentifierIeType:
            {
                NodeIdentifierIe ieObject =
                dynamic_cast<
                NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeNodeIdentifierIe(buffer, data.sgsnIdentifier, ieHeader.length);

                    data.sgsnIdentifierIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: sgsnIdentifier\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    rc = ieObject.decodeNodeIdentifierIe(buffer, data.mmeIdentifier, ieHeader.length);

                    data.mmeIdentifierIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: mmeIdentifier\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }

            default:
            {
                // Unknown IE print error
                errorStream.add((char *)"Unknown IE Type: ");
                errorStream.add(ieHeader.ieType);
                errorStream.endOfLine();
                buffer.skipBytes(ieHeader.length);
            }
        }
    }
    return rc; // TODO validations
}

void ContextRequestMsg::
displayContextRequestMsgData_v(ContextRequestMsgData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"ContextRequestMsg:");
    stream.endOfLine();
    stream.incrIndent();
        
    
    if (data.imsiIePresent)
    {


        stream.add((char *)"IE - imsi:");
        stream.endOfLine();
        ImsiIe imsi=
        dynamic_cast<
        ImsiIe&>(GtpV2IeFactory::getInstance().getIeObject(ImsiIeType));
        imsi.displayImsiIe_v(data.imsi, stream);

    }
    if (data.gutiIePresent)
    {


        stream.add((char *)"IE - guti:");
        stream.endOfLine();
        GutiIe guti=
        dynamic_cast<
        GutiIe&>(GtpV2IeFactory::getInstance().getIeObject(GutiIeType));
        guti.displayGutiIe_v(data.guti, stream);

    }
    if (data.routeingAreaIdentityIePresent)
    {


        stream.add((char *)"IE - routeingAreaIdentity:");
        stream.endOfLine();
        UliIe routeingAreaIdentity=
        dynamic_cast<
        UliIe&>(GtpV2IeFactory::getInstance().getIeObject(UliIeType));
        routeingAreaIdentity.displayUliIe_v(data.routeingAreaIdentity, stream);

    }
    if (data.packetTmsiIePresent)
    {


        stream.add((char *)"IE - packetTmsi:");
        stream.endOfLine();
        PTmsiIe packetTmsi=
        dynamic_cast<
        PTmsiIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiIeType));
        packetTmsi.displayPTmsiIe_v(data.packetTmsi, stream);

    }
    if (data.pTmsiSignatureIePresent)
    {


        stream.add((char *)"IE - pTmsiSignature:");
        stream.endOfLine();
        PTmsiSignatureIe pTmsiSignature=
        dynamic_cast<
        PTmsiSignatureIe&>(GtpV2IeFactory::getInstance().getIeObject(PTmsiSignatureIeType));
        pTmsiSignature.displayPTmsiSignatureIe_v(data.pTmsiSignature, stream);

    }
    if (data.completeTauRequestMessageIePresent)
    {


        stream.add((char *)"IE - completeTauRequestMessage:");
        stream.endOfLine();
        CompleteRequestMessageIe completeTauRequestMessage=
        dynamic_cast<
        CompleteRequestMessageIe&>(GtpV2IeFactory::getInstance().getIeObject(CompleteRequestMessageIeType));
        completeTauRequestMessage.displayCompleteRequestMessageIe_v(data.completeTauRequestMessage, stream);

    }
    if (data.teidForControlPlaneIePresent)
    {


        stream.add((char *)"IE - teidForControlPlane:");
        stream.endOfLine();
        FTeidIe teidForControlPlane=
        dynamic_cast<
        FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
        teidForControlPlane.displayFTeidIe_v(data.teidForControlPlane, stream);

    }
    if (data.udpSourcePortNumberIePresent)
    {


        stream.add((char *)"IE - udpSourcePortNumber:");
        stream.endOfLine();
        PortNumberIe udpSourcePortNumber=
        dynamic_cast<
        PortNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(PortNumberIeType));
        udpSourcePortNumber.displayPortNumberIe_v(data.udpSourcePortNumber, stream);

    }
    if (data.ratTypeIePresent)
    {


        stream.add((char *)"IE - ratType:");
        stream.endOfLine();
        RatTypeIe ratType=
        dynamic_cast<
        RatTypeIe&>(GtpV2IeFactory::getInstance().getIeObject(RatTypeIeType));
        ratType.displayRatTypeIe_v(data.ratType, stream);

    }
    if (data.indicationFlagsIePresent)
    {


        stream.add((char *)"IE - indicationFlags:");
        stream.endOfLine();
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        indicationFlags.displayIndicationIe_v(data.indicationFlags, stream);

    }
    if (data.targetPlmnIdIePresent)
    {


        stream.add((char *)"IE - targetPlmnId:");
        stream.endOfLine();
        ServingNetworkIe targetPlmnId=
        dynamic_cast<
        ServingNetworkIe&>(GtpV2IeFactory::getInstance().getIeObject(ServingNetworkIeType));
        targetPlmnId.displayServingNetworkIe_v(data.targetPlmnId, stream);

    }
    if (data.sgsnNodeNameIePresent)
    {


        stream.add((char *)"IE - sgsnNodeName:");
        stream.endOfLine();
        FqdnIe sgsnNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        sgsnNodeName.displayFqdnIe_v(data.sgsnNodeName, stream);

    }
    if (data.mmeNodeNameIePresent)
    {


        stream.add((char *)"IE - mmeNodeName:");
        stream.endOfLine();
        FqdnIe mmeNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        mmeNodeName.displayFqdnIe_v(data.mmeNodeName, stream);

    }
    if (data.sgsnNumberIePresent)
    {


        stream.add((char *)"IE - sgsnNumber:");
        stream.endOfLine();
        NodeNumberIe sgsnNumber=
        dynamic_cast<
        NodeNumberIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeNumberIeType));
        sgsnNumber.displayNodeNumberIe_v(data.sgsnNumber, stream);

    }
    if (data.sgsnIdentifierIePresent)
    {


        stream.add((char *)"IE - sgsnIdentifier:");
        stream.endOfLine();
        NodeIdentifierIe sgsnIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        sgsnIdentifier.displayNodeIdentifierIe_v(data.sgsnIdentifier, stream);

    }
    if (data.mmeIdentifierIePresent)
    {


        stream.add((char *)"IE - mmeIdentifier:");
        stream.endOfLine();
        NodeIdentifierIe mmeIdentifier=
        dynamic_cast<
        NodeIdentifierIe&>(GtpV2IeFactory::getInstance().getIeObject(NodeIdentifierIeType));
        mmeIdentifier.displayNodeIdentifierIe_v(data.mmeIdentifier, stream);

    }

    stream.decrIndent();
    stream.decrIndent();
}

