/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/ietemplate.cpp.tt>
 ******************************************************************************/

#include "svFlagsIe.h"
#include "dataTypeCodecUtils.h"

SvFlagsIe::SvFlagsIe() 
{
    ieType = 60;
    // TODO

}

SvFlagsIe::~SvFlagsIe() {
    // TODO Auto-generated destructor stub
}

bool SvFlagsIe::encodeSvFlagsIe(MsgBuffer &buffer, SvFlagsIeData const &data)
{
    buffer.skipBits(1);

    buffer.skipBits(1);

    buffer.skipBits(1);

    buffer.skipBits(1);

    if(!(buffer.writeBits(data.VHO, 1)))
    {
        errorStream.add((char *)"Encoding of VHO failed\n");
        return false;
    }
    if(!(buffer.writeBits(data.STI, 1)))
    {
        errorStream.add((char *)"Encoding of STI failed\n");
        return false;
    }
    if(!(buffer.writeBits(data.ICS, 1)))
    {
        errorStream.add((char *)"Encoding of ICS failed\n");
        return false;
    }
    if(!(buffer.writeBits(data.EmInd, 1)))
    {
        errorStream.add((char *)"Encoding of EmInd failed\n");
        return false;
    }
    if (!(buffer.writeUint8(data.theseOctetsIsPresentOnlyIfExplicitlySpecified)))
    {
        errorStream.add((char *)"Encoding of theseOctetsIsPresentOnlyIfExplicitlySpecified failed\n");
        return false;
    }

    return true;
}

bool SvFlagsIe::decodeSvFlagsIe(MsgBuffer &buffer, SvFlagsIeData &data, Uint16 length)
{     
    // TODO optimize the length checks
    
    Uint16 ieBoundary = buffer.getCurrentIndex() + length;
    buffer.skipBits(1);
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: \n");
        return false;
    }

    buffer.skipBits(1);
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: \n");
        return false;
    }

    buffer.skipBits(1);
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: \n");
        return false;
    }

    buffer.skipBits(1);
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: \n");
        return false;
    }

    data.VHO = buffer.readBits(1);
    // confirm that we are not reading beyond the IE boundary
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: VHO\n");
        return false;
    }
    data.STI = buffer.readBits(1);
    // confirm that we are not reading beyond the IE boundary
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: STI\n");
        return false;
    }
    data.ICS = buffer.readBits(1);
    // confirm that we are not reading beyond the IE boundary
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: ICS\n");
        return false;
    }
    data.EmInd = buffer.readBits(1);
    // confirm that we are not reading beyond the IE boundary
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: EmInd\n");
        return false;
    }

    buffer.readUint8(data.theseOctetsIsPresentOnlyIfExplicitlySpecified);
    if (buffer.getCurrentIndex() > ieBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond IE boundary: theseOctetsIsPresentOnlyIfExplicitlySpecified\n");
        return false;
    }

    // The IE is decoded now. The buffer index should be pointing to the 
    // IE Boundary. If not, we have some more data left for the IE which we don't know
    // how to decode
    if (ieBoundary == buffer.getCurrentIndex())
    {
        return true;
    }
    else
    {
        errorStream.add((char *)"Unable to decode IE SvFlagsIe\n");
        return false;
    }
}
void SvFlagsIe::displaySvFlagsIe_v(SvFlagsIeData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"SvFlagsIeData:");
    stream.incrIndent();
    stream.endOfLine();
  
    stream.add( (char *)"VHO: "); 
    stream.add((Uint8)data.VHO);
    stream.endOfLine();
  
    stream.add( (char *)"STI: "); 
    stream.add((Uint8)data.STI);
    stream.endOfLine();
  
    stream.add( (char *)"ICS: "); 
    stream.add((Uint8)data.ICS);
    stream.endOfLine();
  
    stream.add( (char *)"EmInd: "); 
    stream.add((Uint8)data.EmInd);
    stream.endOfLine();
  
    stream.add((char *)"theseOctetsIsPresentOnlyIfExplicitlySpecified: ");
    stream.add(data.theseOctetsIsPresentOnlyIfExplicitlySpecified);
    stream.endOfLine();
    stream.decrIndent();
    stream.decrIndent();
}
