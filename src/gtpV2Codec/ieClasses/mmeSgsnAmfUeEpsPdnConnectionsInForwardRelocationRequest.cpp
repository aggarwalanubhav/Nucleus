/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */ 

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/grpieinsttemplate.cpp.tt>
 ******************************************************************************/
 
#include "mmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest.h"
#include "manual/gtpV2Ie.h"
#include "gtpV2IeFactory.h"
#include "apnIe.h"
#include "apnRestrictionIe.h"
#include "selectionModeIe.h"
#include "ipAddressIe.h"
#include "ipAddressIe.h"
#include "ebiIe.h"
#include "fTeidIe.h"
#include "fqdnIe.h"
#include "bearerContextIe.h"
#include "bearerContextsInForwardRelocationRequest.h"
#include "ambrIe.h"
#include "chargingCharacteristicsIe.h"
#include "changeReportingActionIe.h"
#include "csgInformationReportingActionIe.h"
#include "henbInformationReportingIe.h"
#include "indicationIe.h"
#include "signallingPriorityIndicationIe.h"
#include "changeToReportFlagsIe.h"
#include "fqdnIe.h"
#include "presenceReportingAreaActionIe.h"
#include "wlanOffloadabilityIndicationIe.h"
#include "remoteUeContextIe.h"
#include "remoteUeContextConnectedInForwardRelocationRequest.h"
#include "pdnTypeIe.h"
#include "headerCompressionConfigurationIe.h"

MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest::
MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest()
{
    Uint16 mandIe;
    mandIe = ApnIeType;
    mandIe = (mandIe << 8) | 0; // apn
    mandatoryIeSet.insert(mandIe);
    mandIe = EbiIeType;
    mandIe = (mandIe << 8) | 0; // linkedEpsBearerId
    mandatoryIeSet.insert(mandIe);
    mandIe = FTeidIeType;
    mandIe = (mandIe << 8) | 0; // pgwS5S8IpAddressForControlPlaneOrPmip
    mandatoryIeSet.insert(mandIe);
    mandIe = AmbrIeType;
    mandIe = (mandIe << 8) | 0; // aggregateMaximumBitRate
    mandatoryIeSet.insert(mandIe);

}

MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest::
~MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest()
{

}
bool MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest::
encodeMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest(MsgBuffer &buffer,
                         MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequestData
                          const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;


    
    // Encode the Ie Header
    header.ieType = ApnIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    ApnIe apn=
    dynamic_cast<
    ApnIe&>(GtpV2IeFactory::getInstance().getIeObject(ApnIeType));
    rc = apn.encodeApnIe(buffer, data.apn);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);
    if (!(rc))
    {
        errorStream.add((char *)"Failed to encode IE: apn\n");
        return false;
    }
    if (data.apnRestrictionIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ApnRestrictionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ApnRestrictionIe apnRestriction=
        dynamic_cast<
        ApnRestrictionIe&>(GtpV2IeFactory::getInstance().getIeObject(ApnRestrictionIeType));
        rc = apnRestriction.encodeApnRestrictionIe(buffer, data.apnRestriction);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: apnRestriction\n");
          return false;
        }
    }
    if (data.selectionModeIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = SelectionModeIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        SelectionModeIe selectionMode=
        dynamic_cast<
        SelectionModeIe&>(GtpV2IeFactory::getInstance().getIeObject(SelectionModeIeType));
        rc = selectionMode.encodeSelectionModeIe(buffer, data.selectionMode);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: selectionMode\n");
          return false;
        }
    }
    if (data.ipv4AddressIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IpAddressIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IpAddressIe ipv4Address=
        dynamic_cast<
        IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
        rc = ipv4Address.encodeIpAddressIe(buffer, data.ipv4Address);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: ipv4Address\n");
          return false;
        }
    }
    if (data.ipv6AddressIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IpAddressIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IpAddressIe ipv6Address=
        dynamic_cast<
        IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
        rc = ipv6Address.encodeIpAddressIe(buffer, data.ipv6Address);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: ipv6Address\n");
          return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = EbiIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    EbiIe linkedEpsBearerId=
    dynamic_cast<
    EbiIe&>(GtpV2IeFactory::getInstance().getIeObject(EbiIeType));
    rc = linkedEpsBearerId.encodeEbiIe(buffer, data.linkedEpsBearerId);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);
    if (!(rc))
    {
        errorStream.add((char *)"Failed to encode IE: linkedEpsBearerId\n");
        return false;
    }

    
    // Encode the Ie Header
    header.ieType = FTeidIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    FTeidIe pgwS5S8IpAddressForControlPlaneOrPmip=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    rc = pgwS5S8IpAddressForControlPlaneOrPmip.encodeFTeidIe(buffer, data.pgwS5S8IpAddressForControlPlaneOrPmip);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);
    if (!(rc))
    {
        errorStream.add((char *)"Failed to encode IE: pgwS5S8IpAddressForControlPlaneOrPmip\n");
        return false;
    }
    if (data.pgwNodeNameIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe pgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = pgwNodeName.encodeFqdnIe(buffer, data.pgwNodeName);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: pgwNodeName\n");
          return false;
        }
    }

	Uint8 msgType = ForwardRelocationRequestMsgType;
				
    if (data.bearerContextsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe bearerContexts=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        BearerContextsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        BearerContextsInForwardRelocationRequest&>(bearerContexts.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeBearerContextsInForwardRelocationRequest(buffer, data.bearerContexts);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: bearerContexts\n");
          return false;
        }
    }

    
    // Encode the Ie Header
    header.ieType = AmbrIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    AmbrIe aggregateMaximumBitRate=
    dynamic_cast<
    AmbrIe&>(GtpV2IeFactory::getInstance().getIeObject(AmbrIeType));
    rc = aggregateMaximumBitRate.encodeAmbrIe(buffer, data.aggregateMaximumBitRate);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);
    if (!(rc))
    {
        errorStream.add((char *)"Failed to encode IE: aggregateMaximumBitRate\n");
        return false;
    }
    if (data.chargingCharacteristicsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ChargingCharacteristicsIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ChargingCharacteristicsIe chargingCharacteristics=
        dynamic_cast<
        ChargingCharacteristicsIe&>(GtpV2IeFactory::getInstance().getIeObject(ChargingCharacteristicsIeType));
        rc = chargingCharacteristics.encodeChargingCharacteristicsIe(buffer, data.chargingCharacteristics);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: chargingCharacteristics\n");
          return false;
        }
    }
    if (data.changeReportingActionIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ChangeReportingActionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ChangeReportingActionIe changeReportingAction=
        dynamic_cast<
        ChangeReportingActionIe&>(GtpV2IeFactory::getInstance().getIeObject(ChangeReportingActionIeType));
        rc = changeReportingAction.encodeChangeReportingActionIe(buffer, data.changeReportingAction);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: changeReportingAction\n");
          return false;
        }
    }
    if (data.csgInformationReportingActionIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = CsgInformationReportingActionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        CsgInformationReportingActionIe csgInformationReportingAction=
        dynamic_cast<
        CsgInformationReportingActionIe&>(GtpV2IeFactory::getInstance().getIeObject(CsgInformationReportingActionIeType));
        rc = csgInformationReportingAction.encodeCsgInformationReportingActionIe(buffer, data.csgInformationReportingAction);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: csgInformationReportingAction\n");
          return false;
        }
    }
    if (data.hNbInformationReportingIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = HenbInformationReportingIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        HenbInformationReportingIe hNbInformationReporting=
        dynamic_cast<
        HenbInformationReportingIe&>(GtpV2IeFactory::getInstance().getIeObject(HenbInformationReportingIeType));
        rc = hNbInformationReporting.encodeHenbInformationReportingIe(buffer, data.hNbInformationReporting);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: hNbInformationReporting\n");
          return false;
        }
    }
    if (data.indicationFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        rc = indicationFlags.encodeIndicationIe(buffer, data.indicationFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: indicationFlags\n");
          return false;
        }
    }
    if (data.signallingPriorityIndicationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = SignallingPriorityIndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        SignallingPriorityIndicationIe signallingPriorityIndication=
        dynamic_cast<
        SignallingPriorityIndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(SignallingPriorityIndicationIeType));
        rc = signallingPriorityIndication.encodeSignallingPriorityIndicationIe(buffer, data.signallingPriorityIndication);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: signallingPriorityIndication\n");
          return false;
        }
    }
    if (data.changeToReportFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = ChangeToReportFlagsIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        ChangeToReportFlagsIe changeToReportFlags=
        dynamic_cast<
        ChangeToReportFlagsIe&>(GtpV2IeFactory::getInstance().getIeObject(ChangeToReportFlagsIeType));
        rc = changeToReportFlags.encodeChangeToReportFlagsIe(buffer, data.changeToReportFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: changeToReportFlags\n");
          return false;
        }
    }
    if (data.localHomeNetworkIdIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FqdnIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FqdnIe localHomeNetworkId=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        rc = localHomeNetworkId.encodeFqdnIe(buffer, data.localHomeNetworkId);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: localHomeNetworkId\n");
          return false;
        }
    }
    if (data.presenceReportingAreaActionIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PresenceReportingAreaActionIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PresenceReportingAreaActionIe presenceReportingAreaAction=
        dynamic_cast<
        PresenceReportingAreaActionIe&>(GtpV2IeFactory::getInstance().getIeObject(PresenceReportingAreaActionIeType));
        rc = presenceReportingAreaAction.encodePresenceReportingAreaActionIe(buffer, data.presenceReportingAreaAction);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: presenceReportingAreaAction\n");
          return false;
        }
    }
    if (data.wlanOffloadabilityIndicationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = WlanOffloadabilityIndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        WlanOffloadabilityIndicationIe wlanOffloadabilityIndication=
        dynamic_cast<
        WlanOffloadabilityIndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(WlanOffloadabilityIndicationIeType));
        rc = wlanOffloadabilityIndication.encodeWlanOffloadabilityIndicationIe(buffer, data.wlanOffloadabilityIndication);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: wlanOffloadabilityIndication\n");
          return false;
        }
    }
    if (data.remoteUeContextConnectedIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = RemoteUeContextIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        RemoteUeContextIe remoteUeContextConnected=
        dynamic_cast<
        RemoteUeContextIe&>(GtpV2IeFactory::getInstance().getIeObject(RemoteUeContextIeType));
        RemoteUeContextConnectedInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        RemoteUeContextConnectedInForwardRelocationRequest&>(remoteUeContextConnected.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeRemoteUeContextConnectedInForwardRelocationRequest(buffer, data.remoteUeContextConnected);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: remoteUeContextConnected\n");
          return false;
        }
    }
    if (data.pdnTypeIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = PdnTypeIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        PdnTypeIe pdnType=
        dynamic_cast<
        PdnTypeIe&>(GtpV2IeFactory::getInstance().getIeObject(PdnTypeIeType));
        rc = pdnType.encodePdnTypeIe(buffer, data.pdnType);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: pdnType\n");
          return false;
        }
    }
    if (data.headerCompressionConfigurationIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = HeaderCompressionConfigurationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        HeaderCompressionConfigurationIe headerCompressionConfiguration=
        dynamic_cast<
        HeaderCompressionConfigurationIe&>(GtpV2IeFactory::getInstance().getIeObject(HeaderCompressionConfigurationIeType));
        rc = headerCompressionConfiguration.encodeHeaderCompressionConfigurationIe(buffer, data.headerCompressionConfiguration);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        {
          errorStream.add((char *)"Failed to encode IE: headerCompressionConfiguration\n");
          return false;
        }
    }
    return rc;
}

bool MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest::
decodeMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest(MsgBuffer &buffer,
                         MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequestData 
                         &data, Uint16 length)
{
    Uint16 groupedIeBoundary = length + buffer.getCurrentIndex();
    bool rc = false;
    GtpV2IeHeader ieHeader;
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while ((buffer.lengthLeft() > IE_HEADER_SIZE) &&
                   (buffer.getCurrentIndex() < groupedIeBoundary))
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }
    
        switch (ieHeader.ieType){
            case ApnIeType:
            {
                ApnIe ieObject =
                dynamic_cast<
                ApnIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(ApnIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeApnIe(buffer, data.apn, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: apn\n");
                        return false;
                    }
                    Uint16 mandIe = ApnIeType;
                    mandIe = (mandIe << 8) | 0;
                    mandatoryIeLocalList.erase(mandIe);
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case ApnRestrictionIeType:
            {
                ApnRestrictionIe ieObject =
                dynamic_cast<
                ApnRestrictionIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(ApnRestrictionIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeApnRestrictionIe(buffer, data.apnRestriction, ieHeader.length);

                    data.apnRestrictionIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: apnRestriction\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case SelectionModeIeType:
            {
                SelectionModeIe ieObject =
                dynamic_cast<
                SelectionModeIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(SelectionModeIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeSelectionModeIe(buffer, data.selectionMode, ieHeader.length);

                    data.selectionModeIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: selectionMode\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case IpAddressIeType:
            {
                IpAddressIe ieObject =
                dynamic_cast<
                IpAddressIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(IpAddressIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeIpAddressIe(buffer, data.ipv4Address, ieHeader.length);

                    data.ipv4AddressIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ipv4Address\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {

                    rc = ieObject.decodeIpAddressIe(buffer, data.ipv6Address, ieHeader.length);

                    data.ipv6AddressIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: ipv6Address\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case EbiIeType:
            {
                EbiIe ieObject =
                dynamic_cast<
                EbiIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(EbiIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeEbiIe(buffer, data.linkedEpsBearerId, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: linkedEpsBearerId\n");
                        return false;
                    }
                    Uint16 mandIe = EbiIeType;
                    mandIe = (mandIe << 8) | 0;
                    mandatoryIeLocalList.erase(mandIe);
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case FTeidIeType:
            {
                FTeidIe ieObject =
                dynamic_cast<
                FTeidIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(FTeidIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeFTeidIe(buffer, data.pgwS5S8IpAddressForControlPlaneOrPmip, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: pgwS5S8IpAddressForControlPlaneOrPmip\n");
                        return false;
                    }
                    Uint16 mandIe = FTeidIeType;
                    mandIe = (mandIe << 8) | 0;
                    mandatoryIeLocalList.erase(mandIe);
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case FqdnIeType:
            {
                FqdnIe ieObject =
                dynamic_cast<
                FqdnIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(FqdnIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeFqdnIe(buffer, data.pgwNodeName, ieHeader.length);

                    data.pgwNodeNameIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: pgwNodeName\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {

                    rc = ieObject.decodeFqdnIe(buffer, data.localHomeNetworkId, ieHeader.length);

                    data.localHomeNetworkIdIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: localHomeNetworkId\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case BearerContextIeType:
            {
                BearerContextIe ieObject =
                dynamic_cast<
                BearerContextIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(BearerContextIeType));

				Uint8 msgType = ForwardRelocationRequestMsgType;

                if(ieHeader.instance == 0)
                {

                    BearerContextsInForwardRelocationRequest groupedIeInstance =
                    dynamic_cast<
                    BearerContextsInForwardRelocationRequest&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeBearerContextsInForwardRelocationRequest(buffer, data.bearerContexts, ieHeader.length);

                    data.bearerContextsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: bearerContexts\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case AmbrIeType:
            {
                AmbrIe ieObject =
                dynamic_cast<
                AmbrIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(AmbrIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeAmbrIe(buffer, data.aggregateMaximumBitRate, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: aggregateMaximumBitRate\n");
                        return false;
                    }
                    Uint16 mandIe = AmbrIeType;
                    mandIe = (mandIe << 8) | 0;
                    mandatoryIeLocalList.erase(mandIe);
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case ChargingCharacteristicsIeType:
            {
                ChargingCharacteristicsIe ieObject =
                dynamic_cast<
                ChargingCharacteristicsIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(ChargingCharacteristicsIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeChargingCharacteristicsIe(buffer, data.chargingCharacteristics, ieHeader.length);

                    data.chargingCharacteristicsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: chargingCharacteristics\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case ChangeReportingActionIeType:
            {
                ChangeReportingActionIe ieObject =
                dynamic_cast<
                ChangeReportingActionIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(ChangeReportingActionIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeChangeReportingActionIe(buffer, data.changeReportingAction, ieHeader.length);

                    data.changeReportingActionIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: changeReportingAction\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case CsgInformationReportingActionIeType:
            {
                CsgInformationReportingActionIe ieObject =
                dynamic_cast<
                CsgInformationReportingActionIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(CsgInformationReportingActionIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeCsgInformationReportingActionIe(buffer, data.csgInformationReportingAction, ieHeader.length);

                    data.csgInformationReportingActionIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: csgInformationReportingAction\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case HenbInformationReportingIeType:
            {
                HenbInformationReportingIe ieObject =
                dynamic_cast<
                HenbInformationReportingIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(HenbInformationReportingIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeHenbInformationReportingIe(buffer, data.hNbInformationReporting, ieHeader.length);

                    data.hNbInformationReportingIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: hNbInformationReporting\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case IndicationIeType:
            {
                IndicationIe ieObject =
                dynamic_cast<
                IndicationIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(IndicationIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeIndicationIe(buffer, data.indicationFlags, ieHeader.length);

                    data.indicationFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: indicationFlags\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case SignallingPriorityIndicationIeType:
            {
                SignallingPriorityIndicationIe ieObject =
                dynamic_cast<
                SignallingPriorityIndicationIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(SignallingPriorityIndicationIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeSignallingPriorityIndicationIe(buffer, data.signallingPriorityIndication, ieHeader.length);

                    data.signallingPriorityIndicationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: signallingPriorityIndication\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case ChangeToReportFlagsIeType:
            {
                ChangeToReportFlagsIe ieObject =
                dynamic_cast<
                ChangeToReportFlagsIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(ChangeToReportFlagsIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeChangeToReportFlagsIe(buffer, data.changeToReportFlags, ieHeader.length);

                    data.changeToReportFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: changeToReportFlags\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case PresenceReportingAreaActionIeType:
            {
                PresenceReportingAreaActionIe ieObject =
                dynamic_cast<
                PresenceReportingAreaActionIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(PresenceReportingAreaActionIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodePresenceReportingAreaActionIe(buffer, data.presenceReportingAreaAction, ieHeader.length);

                    data.presenceReportingAreaActionIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: presenceReportingAreaAction\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case WlanOffloadabilityIndicationIeType:
            {
                WlanOffloadabilityIndicationIe ieObject =
                dynamic_cast<
                WlanOffloadabilityIndicationIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(WlanOffloadabilityIndicationIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeWlanOffloadabilityIndicationIe(buffer, data.wlanOffloadabilityIndication, ieHeader.length);

                    data.wlanOffloadabilityIndicationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: wlanOffloadabilityIndication\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case RemoteUeContextIeType:
            {
                RemoteUeContextIe ieObject =
                dynamic_cast<
                RemoteUeContextIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(RemoteUeContextIeType));

				Uint8 msgType = ForwardRelocationRequestMsgType;

                if(ieHeader.instance == 0)
                {

                    RemoteUeContextConnectedInForwardRelocationRequest groupedIeInstance =
                    dynamic_cast<
                    RemoteUeContextConnectedInForwardRelocationRequest&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeRemoteUeContextConnectedInForwardRelocationRequest(buffer, data.remoteUeContextConnected, ieHeader.length);

                    data.remoteUeContextConnectedIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: remoteUeContextConnected\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case PdnTypeIeType:
            {
                PdnTypeIe ieObject =
                dynamic_cast<
                PdnTypeIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(PdnTypeIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodePdnTypeIe(buffer, data.pdnType, ieHeader.length);

                    data.pdnTypeIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: pdnType\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            case HeaderCompressionConfigurationIeType:
            {
                HeaderCompressionConfigurationIe ieObject =
                dynamic_cast<
                HeaderCompressionConfigurationIe&>(GtpV2IeFactory::getInstance().
                         getIeObject(HeaderCompressionConfigurationIeType));

                if(ieHeader.instance == 0)
                {

                    rc = ieObject.decodeHeaderCompressionConfigurationIe(buffer, data.headerCompressionConfiguration, ieHeader.length);

                    data.headerCompressionConfigurationIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: headerCompressionConfiguration\n");
                        return false;
                    }
                }
                else
                {
                    // Unknown IE instance print error TODO
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
            default:
            {
            // Unknown IE print error
            errorStream.add((char *)"Unknown IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.endOfLine();
            buffer.skipBytes(ieHeader.length);
            }
        }
    }
    if (!mandatoryIeLocalList.empty())
    {
        // some mandatory IEs are missing
        errorStream.add((char *)"Missing Mandatory IEs:");
        errorStream.endOfLine();
        while (!mandatoryIeLocalList.empty())
        {
            Uint16 missingMandIe = *mandatoryIeLocalList.begin ();
            mandatoryIeLocalList.erase (mandatoryIeLocalList.begin ());
            Uint16 missingInstance = missingMandIe & 0x00FF;
            Uint16 missingIeType = (missingMandIe >> 8);
            errorStream.add ((char *)"Missing Ie type: ");
            errorStream.add (missingIeType);
            errorStream.add ((char *)"  Instance: ");
            errorStream.add (missingInstance);
            errorStream.endOfLine();
        }
        rc = false;
    
    }
    return rc; 
}

void MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest::
displayMmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequestData_v
(MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequestData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"MmeSgsnAmfUeEpsPdnConnectionsInForwardRelocationRequest:");
    stream.endOfLine();
    stream.incrIndent();

    stream.add((char *)"apn:");
    stream.endOfLine();
    ApnIe apn=
    dynamic_cast<
    ApnIe&>(GtpV2IeFactory::getInstance().getIeObject(ApnIeType));
    apn.displayApnIe_v(data.apn, stream);

    if (data.apnRestrictionIePresent)
    {
        stream.add((char *)"apnRestriction:");
        stream.endOfLine();
        ApnRestrictionIe apnRestriction=
        dynamic_cast<
        ApnRestrictionIe&>(GtpV2IeFactory::getInstance().getIeObject(ApnRestrictionIeType));
        apnRestriction.displayApnRestrictionIe_v(data.apnRestriction, stream);

	}
     if (data.selectionModeIePresent)
    {
        stream.add((char *)"selectionMode:");
        stream.endOfLine();
        SelectionModeIe selectionMode=
        dynamic_cast<
        SelectionModeIe&>(GtpV2IeFactory::getInstance().getIeObject(SelectionModeIeType));
        selectionMode.displaySelectionModeIe_v(data.selectionMode, stream);

	}
     if (data.ipv4AddressIePresent)
    {
        stream.add((char *)"ipv4Address:");
        stream.endOfLine();
        IpAddressIe ipv4Address=
        dynamic_cast<
        IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
        ipv4Address.displayIpAddressIe_v(data.ipv4Address, stream);

	}
     if (data.ipv6AddressIePresent)
    {
        stream.add((char *)"ipv6Address:");
        stream.endOfLine();
        IpAddressIe ipv6Address=
        dynamic_cast<
        IpAddressIe&>(GtpV2IeFactory::getInstance().getIeObject(IpAddressIeType));
        ipv6Address.displayIpAddressIe_v(data.ipv6Address, stream);

	}
     stream.add((char *)"linkedEpsBearerId:");
    stream.endOfLine();
    EbiIe linkedEpsBearerId=
    dynamic_cast<
    EbiIe&>(GtpV2IeFactory::getInstance().getIeObject(EbiIeType));
    linkedEpsBearerId.displayEbiIe_v(data.linkedEpsBearerId, stream);

    stream.add((char *)"pgwS5S8IpAddressForControlPlaneOrPmip:");
    stream.endOfLine();
    FTeidIe pgwS5S8IpAddressForControlPlaneOrPmip=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    pgwS5S8IpAddressForControlPlaneOrPmip.displayFTeidIe_v(data.pgwS5S8IpAddressForControlPlaneOrPmip, stream);

    if (data.pgwNodeNameIePresent)
    {
        stream.add((char *)"pgwNodeName:");
        stream.endOfLine();
        FqdnIe pgwNodeName=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        pgwNodeName.displayFqdnIe_v(data.pgwNodeName, stream);

	}
 
	Uint8 msgType = ForwardRelocationRequestMsgType;
				
    if (data.bearerContextsIePresent)
    {
        stream.add((char *)"bearerContexts:");
        stream.endOfLine();
        BearerContextIe bearerContexts=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        BearerContextsInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        BearerContextsInForwardRelocationRequest&>(bearerContexts.getGroupedIe(msgType, 0));
        groupedIeInstance.displayBearerContextsInForwardRelocationRequestData_v(data.bearerContexts, stream);
	}
     stream.add((char *)"aggregateMaximumBitRate:");
    stream.endOfLine();
    AmbrIe aggregateMaximumBitRate=
    dynamic_cast<
    AmbrIe&>(GtpV2IeFactory::getInstance().getIeObject(AmbrIeType));
    aggregateMaximumBitRate.displayAmbrIe_v(data.aggregateMaximumBitRate, stream);

    if (data.chargingCharacteristicsIePresent)
    {
        stream.add((char *)"chargingCharacteristics:");
        stream.endOfLine();
        ChargingCharacteristicsIe chargingCharacteristics=
        dynamic_cast<
        ChargingCharacteristicsIe&>(GtpV2IeFactory::getInstance().getIeObject(ChargingCharacteristicsIeType));
        chargingCharacteristics.displayChargingCharacteristicsIe_v(data.chargingCharacteristics, stream);

	}
     if (data.changeReportingActionIePresent)
    {
        stream.add((char *)"changeReportingAction:");
        stream.endOfLine();
        ChangeReportingActionIe changeReportingAction=
        dynamic_cast<
        ChangeReportingActionIe&>(GtpV2IeFactory::getInstance().getIeObject(ChangeReportingActionIeType));
        changeReportingAction.displayChangeReportingActionIe_v(data.changeReportingAction, stream);

	}
     if (data.csgInformationReportingActionIePresent)
    {
        stream.add((char *)"csgInformationReportingAction:");
        stream.endOfLine();
        CsgInformationReportingActionIe csgInformationReportingAction=
        dynamic_cast<
        CsgInformationReportingActionIe&>(GtpV2IeFactory::getInstance().getIeObject(CsgInformationReportingActionIeType));
        csgInformationReportingAction.displayCsgInformationReportingActionIe_v(data.csgInformationReportingAction, stream);

	}
     if (data.hNbInformationReportingIePresent)
    {
        stream.add((char *)"hNbInformationReporting:");
        stream.endOfLine();
        HenbInformationReportingIe hNbInformationReporting=
        dynamic_cast<
        HenbInformationReportingIe&>(GtpV2IeFactory::getInstance().getIeObject(HenbInformationReportingIeType));
        hNbInformationReporting.displayHenbInformationReportingIe_v(data.hNbInformationReporting, stream);

	}
     if (data.indicationFlagsIePresent)
    {
        stream.add((char *)"indicationFlags:");
        stream.endOfLine();
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        indicationFlags.displayIndicationIe_v(data.indicationFlags, stream);

	}
     if (data.signallingPriorityIndicationIePresent)
    {
        stream.add((char *)"signallingPriorityIndication:");
        stream.endOfLine();
        SignallingPriorityIndicationIe signallingPriorityIndication=
        dynamic_cast<
        SignallingPriorityIndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(SignallingPriorityIndicationIeType));
        signallingPriorityIndication.displaySignallingPriorityIndicationIe_v(data.signallingPriorityIndication, stream);

	}
     if (data.changeToReportFlagsIePresent)
    {
        stream.add((char *)"changeToReportFlags:");
        stream.endOfLine();
        ChangeToReportFlagsIe changeToReportFlags=
        dynamic_cast<
        ChangeToReportFlagsIe&>(GtpV2IeFactory::getInstance().getIeObject(ChangeToReportFlagsIeType));
        changeToReportFlags.displayChangeToReportFlagsIe_v(data.changeToReportFlags, stream);

	}
     if (data.localHomeNetworkIdIePresent)
    {
        stream.add((char *)"localHomeNetworkId:");
        stream.endOfLine();
        FqdnIe localHomeNetworkId=
        dynamic_cast<
        FqdnIe&>(GtpV2IeFactory::getInstance().getIeObject(FqdnIeType));
        localHomeNetworkId.displayFqdnIe_v(data.localHomeNetworkId, stream);

	}
     if (data.presenceReportingAreaActionIePresent)
    {
        stream.add((char *)"presenceReportingAreaAction:");
        stream.endOfLine();
        PresenceReportingAreaActionIe presenceReportingAreaAction=
        dynamic_cast<
        PresenceReportingAreaActionIe&>(GtpV2IeFactory::getInstance().getIeObject(PresenceReportingAreaActionIeType));
        presenceReportingAreaAction.displayPresenceReportingAreaActionIe_v(data.presenceReportingAreaAction, stream);

	}
     if (data.wlanOffloadabilityIndicationIePresent)
    {
        stream.add((char *)"wlanOffloadabilityIndication:");
        stream.endOfLine();
        WlanOffloadabilityIndicationIe wlanOffloadabilityIndication=
        dynamic_cast<
        WlanOffloadabilityIndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(WlanOffloadabilityIndicationIeType));
        wlanOffloadabilityIndication.displayWlanOffloadabilityIndicationIe_v(data.wlanOffloadabilityIndication, stream);

	}
     if (data.remoteUeContextConnectedIePresent)
    {
        stream.add((char *)"remoteUeContextConnected:");
        stream.endOfLine();
        RemoteUeContextIe remoteUeContextConnected=
        dynamic_cast<
        RemoteUeContextIe&>(GtpV2IeFactory::getInstance().getIeObject(RemoteUeContextIeType));
        RemoteUeContextConnectedInForwardRelocationRequest groupedIeInstance =
        dynamic_cast<
        RemoteUeContextConnectedInForwardRelocationRequest&>(remoteUeContextConnected.getGroupedIe(msgType, 0));
        groupedIeInstance.displayRemoteUeContextConnectedInForwardRelocationRequestData_v(data.remoteUeContextConnected, stream);
	}
     if (data.pdnTypeIePresent)
    {
        stream.add((char *)"pdnType:");
        stream.endOfLine();
        PdnTypeIe pdnType=
        dynamic_cast<
        PdnTypeIe&>(GtpV2IeFactory::getInstance().getIeObject(PdnTypeIeType));
        pdnType.displayPdnTypeIe_v(data.pdnType, stream);

	}
     if (data.headerCompressionConfigurationIePresent)
    {
        stream.add((char *)"headerCompressionConfiguration:");
        stream.endOfLine();
        HeaderCompressionConfigurationIe headerCompressionConfiguration=
        dynamic_cast<
        HeaderCompressionConfigurationIe&>(GtpV2IeFactory::getInstance().getIeObject(HeaderCompressionConfigurationIeType));
        headerCompressionConfiguration.displayHeaderCompressionConfigurationIe_v(data.headerCompressionConfiguration, stream);

	}
 
    stream.decrIndent();
    stream.decrIndent();
}



