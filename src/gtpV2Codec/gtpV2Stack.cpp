/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/stacktemplate.cpp.tt>
 ******************************************************************************/
#include <cstring>
#include <stdint.h>
#include "gtpV2Stack.h"
#include "msgClasses/gtpV2MsgFactory.h"
#include "msgClasses/manual/gtpV2Message.h"
#include "msgClasses/createSessionRequestMsg.h"
#include "msgClasses/createSessionResponseMsg.h"
#include "msgClasses/modifyBearerRequestMsg.h"
#include "msgClasses/modifyBearerResponseMsg.h"
#include "msgClasses/deleteSessionRequestMsg.h"
#include "msgClasses/deleteSessionResponseMsg.h"
#include "msgClasses/releaseAccessBearersRequestMsg.h"
#include "msgClasses/releaseAccessBearersResponseMsg.h"
#include "msgClasses/createBearerRequestMsg.h"
#include "msgClasses/createBearerResponseMsg.h"
#include "msgClasses/deleteBearerRequestMsg.h"
#include "msgClasses/deleteBearerResponseMsg.h"
#include "msgClasses/downlinkDataNotificationMsg.h"
#include "msgClasses/downlinkDataNotificationAcknowledgeMsg.h"
#include "msgClasses/downlinkDataNotificationFailureIndicationMsg.h"
#include "msgClasses/echoRequestMsg.h"
#include "msgClasses/echoResponseMsg.h"
#include "msgClasses/forwardRelocationCompleteNotificationMsg.h"
#include "msgClasses/forwardRelocationCompleteAcknowledgeMsg.h"
#include "msgClasses/forwardAccessContextNotificationMsg.h"
#include "msgClasses/forwardAccessContextAcknowledgeMsg.h"
#include "msgClasses/relocationCancelRequestMsg.h"
#include "msgClasses/relocationCancelResponseMsg.h"
#include "msgClasses/configurationTransferTunnelMsg.h"
#include "msgClasses/identificationRequestMsg.h"
#include "msgClasses/identificationResponseMsg.h"
#include "msgClasses/srvccPsToCsCompleteNotificationMsg.h"
#include "msgClasses/pstoCsCompleteAcknowledgeMsg.h"
#include "msgClasses/srvccPsToCsRequestMsg.h"
#include "msgClasses/srvccPsToCsResponseMsg.h"
#include "msgClasses/pstoCsCancelNotificationMsg.h"
#include "msgClasses/detachNotificationMsg.h"
#include "msgClasses/contextRequestMsg.h"
#include "msgClasses/contextResponseMsg.h"
#include "msgClasses/forwardRelocationResponseMsg.h"
#include "msgClasses/forwardRelocationRequestMsg.h"
#include "msgClasses/srvccPsToCsCancelAcknowledgeMsg.h"

thread_local cmn::utils::Debug errorStream;

GtpV2Stack::GtpV2Stack ()
{
    // TODO Auto-generated constructor stub

}

GtpV2Stack::~GtpV2Stack ()
{
    // TODO Auto-generated destructor stub
}

bool
GtpV2Stack::encodeMessage (GtpV2MessageHeader & msgHeader, 
			   MsgBuffer & buffer, void *data_p)
{

    //Clear the global errorStream
    errorStream.clearStream ();
    bool rc = false;
    GtpV2Message & msg =
    GtpV2MsgFactory::getInstance ().getMsgObject (msgHeader.msgType);

	uint16_t gtpHeaderStartIdx = buffer.getCurrentIndex();
    // Encode the header
    GtpV2Message::encodeHeader (buffer, msgHeader);

    Uint16 startIndex = buffer.getCurrentIndex();

    switch (msgHeader.msgType)
    {
        case CreateSessionRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               CreateSessionRequestMsg & >(msg).
               encodeCreateSessionRequestMsg(buffer,
    			     *((CreateSessionRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                CreateSessionRequestMsg & >(msg).
                encodeCreateSessionRequestMsg (buffer,
                            createSessionRequestStackData);
            }
            break;
        }
        case CreateSessionResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               CreateSessionResponseMsg & >(msg).
               encodeCreateSessionResponseMsg(buffer,
    			     *((CreateSessionResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                CreateSessionResponseMsg & >(msg).
                encodeCreateSessionResponseMsg (buffer,
                            createSessionResponseStackData);
            }
            break;
        }
        case ModifyBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ModifyBearerRequestMsg & >(msg).
               encodeModifyBearerRequestMsg(buffer,
    			     *((ModifyBearerRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ModifyBearerRequestMsg & >(msg).
                encodeModifyBearerRequestMsg (buffer,
                            modifyBearerRequestStackData);
            }
            break;
        }
        case ModifyBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ModifyBearerResponseMsg & >(msg).
               encodeModifyBearerResponseMsg(buffer,
    			     *((ModifyBearerResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ModifyBearerResponseMsg & >(msg).
                encodeModifyBearerResponseMsg (buffer,
                            modifyBearerResponseStackData);
            }
            break;
        }
        case DeleteSessionRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DeleteSessionRequestMsg & >(msg).
               encodeDeleteSessionRequestMsg(buffer,
    			     *((DeleteSessionRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DeleteSessionRequestMsg & >(msg).
                encodeDeleteSessionRequestMsg (buffer,
                            deleteSessionRequestStackData);
            }
            break;
        }
        case DeleteSessionResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DeleteSessionResponseMsg & >(msg).
               encodeDeleteSessionResponseMsg(buffer,
    			     *((DeleteSessionResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DeleteSessionResponseMsg & >(msg).
                encodeDeleteSessionResponseMsg (buffer,
                            deleteSessionResponseStackData);
            }
            break;
        }
        case ReleaseAccessBearersRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ReleaseAccessBearersRequestMsg & >(msg).
               encodeReleaseAccessBearersRequestMsg(buffer,
    			     *((ReleaseAccessBearersRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ReleaseAccessBearersRequestMsg & >(msg).
                encodeReleaseAccessBearersRequestMsg (buffer,
                            releaseAccessBearersRequestStackData);
            }
            break;
        }
        case ReleaseAccessBearersResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ReleaseAccessBearersResponseMsg & >(msg).
               encodeReleaseAccessBearersResponseMsg(buffer,
    			     *((ReleaseAccessBearersResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ReleaseAccessBearersResponseMsg & >(msg).
                encodeReleaseAccessBearersResponseMsg (buffer,
                            releaseAccessBearersResponseStackData);
            }
            break;
        }
        case CreateBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               CreateBearerRequestMsg & >(msg).
               encodeCreateBearerRequestMsg(buffer,
    			     *((CreateBearerRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                CreateBearerRequestMsg & >(msg).
                encodeCreateBearerRequestMsg (buffer,
                            createBearerRequestStackData);
            }
            break;
        }
        case CreateBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               CreateBearerResponseMsg & >(msg).
               encodeCreateBearerResponseMsg(buffer,
    			     *((CreateBearerResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                CreateBearerResponseMsg & >(msg).
                encodeCreateBearerResponseMsg (buffer,
                            createBearerResponseStackData);
            }
            break;
        }
        case DeleteBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DeleteBearerRequestMsg & >(msg).
               encodeDeleteBearerRequestMsg(buffer,
    			     *((DeleteBearerRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DeleteBearerRequestMsg & >(msg).
                encodeDeleteBearerRequestMsg (buffer,
                            deleteBearerRequestStackData);
            }
            break;
        }
        case DeleteBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DeleteBearerResponseMsg & >(msg).
               encodeDeleteBearerResponseMsg(buffer,
    			     *((DeleteBearerResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DeleteBearerResponseMsg & >(msg).
                encodeDeleteBearerResponseMsg (buffer,
                            deleteBearerResponseStackData);
            }
            break;
        }
        case DownlinkDataNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DownlinkDataNotificationMsg & >(msg).
               encodeDownlinkDataNotificationMsg(buffer,
    			     *((DownlinkDataNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DownlinkDataNotificationMsg & >(msg).
                encodeDownlinkDataNotificationMsg (buffer,
                            downlinkDataNotificationStackData);
            }
            break;
        }
        case DownlinkDataNotificationAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DownlinkDataNotificationAcknowledgeMsg & >(msg).
               encodeDownlinkDataNotificationAcknowledgeMsg(buffer,
    			     *((DownlinkDataNotificationAcknowledgeMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DownlinkDataNotificationAcknowledgeMsg & >(msg).
                encodeDownlinkDataNotificationAcknowledgeMsg (buffer,
                            downlinkDataNotificationAcknowledgeStackData);
            }
            break;
        }
        case DownlinkDataNotificationFailureIndicationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DownlinkDataNotificationFailureIndicationMsg & >(msg).
               encodeDownlinkDataNotificationFailureIndicationMsg(buffer,
    			     *((DownlinkDataNotificationFailureIndicationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DownlinkDataNotificationFailureIndicationMsg & >(msg).
                encodeDownlinkDataNotificationFailureIndicationMsg (buffer,
                            downlinkDataNotificationFailureIndicationStackData);
            }
            break;
        }
        case EchoRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               EchoRequestMsg & >(msg).
               encodeEchoRequestMsg(buffer,
    			     *((EchoRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                EchoRequestMsg & >(msg).
                encodeEchoRequestMsg (buffer,
                            echoRequestStackData);
            }
            break;
        }
        case EchoResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               EchoResponseMsg & >(msg).
               encodeEchoResponseMsg(buffer,
    			     *((EchoResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                EchoResponseMsg & >(msg).
                encodeEchoResponseMsg (buffer,
                            echoResponseStackData);
            }
            break;
        }
        case ForwardRelocationCompleteNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardRelocationCompleteNotificationMsg & >(msg).
               encodeForwardRelocationCompleteNotificationMsg(buffer,
    			     *((ForwardRelocationCompleteNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardRelocationCompleteNotificationMsg & >(msg).
                encodeForwardRelocationCompleteNotificationMsg (buffer,
                            forwardRelocationCompleteNotificationStackData);
            }
            break;
        }
        case ForwardRelocationCompleteAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardRelocationCompleteAcknowledgeMsg & >(msg).
               encodeForwardRelocationCompleteAcknowledgeMsg(buffer,
    			     *((ForwardRelocationCompleteAcknowledgeMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardRelocationCompleteAcknowledgeMsg & >(msg).
                encodeForwardRelocationCompleteAcknowledgeMsg (buffer,
                            forwardRelocationCompleteAcknowledgeStackData);
            }
            break;
        }
        case ForwardAccessContextNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardAccessContextNotificationMsg & >(msg).
               encodeForwardAccessContextNotificationMsg(buffer,
    			     *((ForwardAccessContextNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardAccessContextNotificationMsg & >(msg).
                encodeForwardAccessContextNotificationMsg (buffer,
                            forwardAccessContextNotificationStackData);
            }
            break;
        }
        case ForwardAccessContextAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardAccessContextAcknowledgeMsg & >(msg).
               encodeForwardAccessContextAcknowledgeMsg(buffer,
    			     *((ForwardAccessContextAcknowledgeMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardAccessContextAcknowledgeMsg & >(msg).
                encodeForwardAccessContextAcknowledgeMsg (buffer,
                            forwardAccessContextAcknowledgeStackData);
            }
            break;
        }
        case RelocationCancelRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               RelocationCancelRequestMsg & >(msg).
               encodeRelocationCancelRequestMsg(buffer,
    			     *((RelocationCancelRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                RelocationCancelRequestMsg & >(msg).
                encodeRelocationCancelRequestMsg (buffer,
                            relocationCancelRequestStackData);
            }
            break;
        }
        case RelocationCancelResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               RelocationCancelResponseMsg & >(msg).
               encodeRelocationCancelResponseMsg(buffer,
    			     *((RelocationCancelResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                RelocationCancelResponseMsg & >(msg).
                encodeRelocationCancelResponseMsg (buffer,
                            relocationCancelResponseStackData);
            }
            break;
        }
        case ConfigurationTransferTunnelMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ConfigurationTransferTunnelMsg & >(msg).
               encodeConfigurationTransferTunnelMsg(buffer,
    			     *((ConfigurationTransferTunnelMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ConfigurationTransferTunnelMsg & >(msg).
                encodeConfigurationTransferTunnelMsg (buffer,
                            configurationTransferTunnelStackData);
            }
            break;
        }
        case IdentificationRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               IdentificationRequestMsg & >(msg).
               encodeIdentificationRequestMsg(buffer,
    			     *((IdentificationRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                IdentificationRequestMsg & >(msg).
                encodeIdentificationRequestMsg (buffer,
                            identificationRequestStackData);
            }
            break;
        }
        case IdentificationResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               IdentificationResponseMsg & >(msg).
               encodeIdentificationResponseMsg(buffer,
    			     *((IdentificationResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                IdentificationResponseMsg & >(msg).
                encodeIdentificationResponseMsg (buffer,
                            identificationResponseStackData);
            }
            break;
        }
        case SrvccPsToCsCompleteNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               SrvccPsToCsCompleteNotificationMsg & >(msg).
               encodeSrvccPsToCsCompleteNotificationMsg(buffer,
    			     *((SrvccPsToCsCompleteNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                SrvccPsToCsCompleteNotificationMsg & >(msg).
                encodeSrvccPsToCsCompleteNotificationMsg (buffer,
                            srvccPsToCsCompleteNotificationStackData);
            }
            break;
        }
        case PstoCsCompleteAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               PstoCsCompleteAcknowledgeMsg & >(msg).
               encodePstoCsCompleteAcknowledgeMsg(buffer,
    			     *((PstoCsCompleteAcknowledgeMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                PstoCsCompleteAcknowledgeMsg & >(msg).
                encodePstoCsCompleteAcknowledgeMsg (buffer,
                            pstoCsCompleteAcknowledgeStackData);
            }
            break;
        }
        case SrvccPsToCsRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               SrvccPsToCsRequestMsg & >(msg).
               encodeSrvccPsToCsRequestMsg(buffer,
    			     *((SrvccPsToCsRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                SrvccPsToCsRequestMsg & >(msg).
                encodeSrvccPsToCsRequestMsg (buffer,
                            srvccPsToCsRequestStackData);
            }
            break;
        }
        case SrvccPsToCsResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               SrvccPsToCsResponseMsg & >(msg).
               encodeSrvccPsToCsResponseMsg(buffer,
    			     *((SrvccPsToCsResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                SrvccPsToCsResponseMsg & >(msg).
                encodeSrvccPsToCsResponseMsg (buffer,
                            srvccPsToCsResponseStackData);
            }
            break;
        }
        case PstoCsCancelNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               PstoCsCancelNotificationMsg & >(msg).
               encodePstoCsCancelNotificationMsg(buffer,
    			     *((PstoCsCancelNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                PstoCsCancelNotificationMsg & >(msg).
                encodePstoCsCancelNotificationMsg (buffer,
                            pstoCsCancelNotificationStackData);
            }
            break;
        }
        case DetachNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               DetachNotificationMsg & >(msg).
               encodeDetachNotificationMsg(buffer,
    			     *((DetachNotificationMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                DetachNotificationMsg & >(msg).
                encodeDetachNotificationMsg (buffer,
                            detachNotificationStackData);
            }
            break;
        }
        case ContextRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ContextRequestMsg & >(msg).
               encodeContextRequestMsg(buffer,
    			     *((ContextRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ContextRequestMsg & >(msg).
                encodeContextRequestMsg (buffer,
                            contextRequestStackData);
            }
            break;
        }
        case ContextResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ContextResponseMsg & >(msg).
               encodeContextResponseMsg(buffer,
    			     *((ContextResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ContextResponseMsg & >(msg).
                encodeContextResponseMsg (buffer,
                            contextResponseStackData);
            }
            break;
        }
        case ForwardRelocationResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardRelocationResponseMsg & >(msg).
               encodeForwardRelocationResponseMsg(buffer,
    			     *((ForwardRelocationResponseMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardRelocationResponseMsg & >(msg).
                encodeForwardRelocationResponseMsg (buffer,
                            forwardRelocationResponseStackData);
            }
            break;
        }
        case ForwardRelocationRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               ForwardRelocationRequestMsg & >(msg).
               encodeForwardRelocationRequestMsg(buffer,
    			     *((ForwardRelocationRequestMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                ForwardRelocationRequestMsg & >(msg).
                encodeForwardRelocationRequestMsg (buffer,
                            forwardRelocationRequestStackData);
            }
            break;
        }
        case SrvccPsToCsCancelAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
               dynamic_cast<
               SrvccPsToCsCancelAcknowledgeMsg & >(msg).
               encodeSrvccPsToCsCancelAcknowledgeMsg(buffer,
    			     *((SrvccPsToCsCancelAcknowledgeMsgData *)
        			     data_p));
            }
            else
            { 
                // Application has filled the data structure provided by the stack
                rc = 
                dynamic_cast<
                SrvccPsToCsCancelAcknowledgeMsg & >(msg).
                encodeSrvccPsToCsCancelAcknowledgeMsg (buffer,
                            srvccPsToCsCancelAcknowledgeStackData);
            }
            break;
        }
    }

    Uint16 endIndex = buffer.getCurrentIndex ();

    Uint16 messageLength = (endIndex - startIndex) + 4; // sequence number always present
    if(msgHeader.teidPresent)
    {
	messageLength += 4;
    }

    buffer.goToIndex (gtpHeaderStartIdx  + 2); // 2 is where length is encoded in a gtp message TODO remove hardcoding
    buffer.writeUint16 (messageLength, false);
    buffer.goToIndex (endIndex);
    return rc;
}

bool
GtpV2Stack::decodeGtpMessageHeader(GtpV2MessageHeader& msgHeader, MsgBuffer& buffer)
{
	 return GtpV2Message::decodeHeader (buffer, msgHeader);
}


bool
GtpV2Stack::decodeMessage (GtpV2MessageHeader& msgHeader, 
                MsgBuffer& buffer,void* data_p)
{
    errorStream.clearStream();
    // First decode the message header
    bool rc = false;
      
    
    
    Uint16 msgDataLength = msgHeader.msgLength;
    
    if (msgHeader.teidPresent)
    {
        msgDataLength = msgDataLength - 8; //teid and sequence number
    }
    else
    {
        msgDataLength = msgDataLength - 4; //only sequence number
    }
  
    // Validate the length before proceeding
    if (msgDataLength != buffer.lengthLeft() )
    {
        // Encoded message length does not match the number of bytes left in the message
        errorStream.add ((char *)"Message length does not match bytes in buffer\n");
        errorStream.add ((char *)"Computed Message length: ");
        errorStream.add (msgDataLength);
        errorStream.add ((char *)"  Bytes Left in buffer: ");
        errorStream.add (buffer.lengthLeft());
        errorStream.endOfLine ();
        return false;
    }

    GtpV2Message& msg = 
    GtpV2MsgFactory::getInstance ().getMsgObject (msgHeader.msgType);

    switch (msgHeader.msgType){
        case CreateSessionRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                CreateSessionRequestMsg & >(msg).
                decodeCreateSessionRequestMsg(buffer,
                            *(CreateSessionRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&createSessionRequestStackData, 0,
                sizeof (CreateSessionRequestMsgData));
                rc =
                dynamic_cast<
                CreateSessionRequestMsg & >(msg).
                decodeCreateSessionRequestMsg(buffer,
                            createSessionRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case CreateSessionResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                CreateSessionResponseMsg & >(msg).
                decodeCreateSessionResponseMsg(buffer,
                            *(CreateSessionResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&createSessionResponseStackData, 0,
                sizeof (CreateSessionResponseMsgData));
                rc =
                dynamic_cast<
                CreateSessionResponseMsg & >(msg).
                decodeCreateSessionResponseMsg(buffer,
                            createSessionResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ModifyBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ModifyBearerRequestMsg & >(msg).
                decodeModifyBearerRequestMsg(buffer,
                            *(ModifyBearerRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&modifyBearerRequestStackData, 0,
                sizeof (ModifyBearerRequestMsgData));
                rc =
                dynamic_cast<
                ModifyBearerRequestMsg & >(msg).
                decodeModifyBearerRequestMsg(buffer,
                            modifyBearerRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case ModifyBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ModifyBearerResponseMsg & >(msg).
                decodeModifyBearerResponseMsg(buffer,
                            *(ModifyBearerResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&modifyBearerResponseStackData, 0,
                sizeof (ModifyBearerResponseMsgData));
                rc =
                dynamic_cast<
                ModifyBearerResponseMsg & >(msg).
                decodeModifyBearerResponseMsg(buffer,
                            modifyBearerResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case DeleteSessionRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DeleteSessionRequestMsg & >(msg).
                decodeDeleteSessionRequestMsg(buffer,
                            *(DeleteSessionRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&deleteSessionRequestStackData, 0,
                sizeof (DeleteSessionRequestMsgData));
                rc =
                dynamic_cast<
                DeleteSessionRequestMsg & >(msg).
                decodeDeleteSessionRequestMsg(buffer,
                            deleteSessionRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case DeleteSessionResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DeleteSessionResponseMsg & >(msg).
                decodeDeleteSessionResponseMsg(buffer,
                            *(DeleteSessionResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&deleteSessionResponseStackData, 0,
                sizeof (DeleteSessionResponseMsgData));
                rc =
                dynamic_cast<
                DeleteSessionResponseMsg & >(msg).
                decodeDeleteSessionResponseMsg(buffer,
                            deleteSessionResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ReleaseAccessBearersRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ReleaseAccessBearersRequestMsg & >(msg).
                decodeReleaseAccessBearersRequestMsg(buffer,
                            *(ReleaseAccessBearersRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&releaseAccessBearersRequestStackData, 0,
                sizeof (ReleaseAccessBearersRequestMsgData));
                rc =
                dynamic_cast<
                ReleaseAccessBearersRequestMsg & >(msg).
                decodeReleaseAccessBearersRequestMsg(buffer,
                            releaseAccessBearersRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case ReleaseAccessBearersResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ReleaseAccessBearersResponseMsg & >(msg).
                decodeReleaseAccessBearersResponseMsg(buffer,
                            *(ReleaseAccessBearersResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&releaseAccessBearersResponseStackData, 0,
                sizeof (ReleaseAccessBearersResponseMsgData));
                rc =
                dynamic_cast<
                ReleaseAccessBearersResponseMsg & >(msg).
                decodeReleaseAccessBearersResponseMsg(buffer,
                            releaseAccessBearersResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case CreateBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                CreateBearerRequestMsg & >(msg).
                decodeCreateBearerRequestMsg(buffer,
                            *(CreateBearerRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&createBearerRequestStackData, 0,
                sizeof (CreateBearerRequestMsgData));
                rc =
                dynamic_cast<
                CreateBearerRequestMsg & >(msg).
                decodeCreateBearerRequestMsg(buffer,
                            createBearerRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case CreateBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                CreateBearerResponseMsg & >(msg).
                decodeCreateBearerResponseMsg(buffer,
                            *(CreateBearerResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&createBearerResponseStackData, 0,
                sizeof (CreateBearerResponseMsgData));
                rc =
                dynamic_cast<
                CreateBearerResponseMsg & >(msg).
                decodeCreateBearerResponseMsg(buffer,
                            createBearerResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case DeleteBearerRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DeleteBearerRequestMsg & >(msg).
                decodeDeleteBearerRequestMsg(buffer,
                            *(DeleteBearerRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&deleteBearerRequestStackData, 0,
                sizeof (DeleteBearerRequestMsgData));
                rc =
                dynamic_cast<
                DeleteBearerRequestMsg & >(msg).
                decodeDeleteBearerRequestMsg(buffer,
                            deleteBearerRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case DeleteBearerResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DeleteBearerResponseMsg & >(msg).
                decodeDeleteBearerResponseMsg(buffer,
                            *(DeleteBearerResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&deleteBearerResponseStackData, 0,
                sizeof (DeleteBearerResponseMsgData));
                rc =
                dynamic_cast<
                DeleteBearerResponseMsg & >(msg).
                decodeDeleteBearerResponseMsg(buffer,
                            deleteBearerResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case DownlinkDataNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DownlinkDataNotificationMsg & >(msg).
                decodeDownlinkDataNotificationMsg(buffer,
                            *(DownlinkDataNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&downlinkDataNotificationStackData, 0,
                sizeof (DownlinkDataNotificationMsgData));
                rc =
                dynamic_cast<
                DownlinkDataNotificationMsg & >(msg).
                decodeDownlinkDataNotificationMsg(buffer,
                            downlinkDataNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case DownlinkDataNotificationAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DownlinkDataNotificationAcknowledgeMsg & >(msg).
                decodeDownlinkDataNotificationAcknowledgeMsg(buffer,
                            *(DownlinkDataNotificationAcknowledgeMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&downlinkDataNotificationAcknowledgeStackData, 0,
                sizeof (DownlinkDataNotificationAcknowledgeMsgData));
                rc =
                dynamic_cast<
                DownlinkDataNotificationAcknowledgeMsg & >(msg).
                decodeDownlinkDataNotificationAcknowledgeMsg(buffer,
                            downlinkDataNotificationAcknowledgeStackData,
                            msgDataLength);
            }
            break;
        }
        case DownlinkDataNotificationFailureIndicationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DownlinkDataNotificationFailureIndicationMsg & >(msg).
                decodeDownlinkDataNotificationFailureIndicationMsg(buffer,
                            *(DownlinkDataNotificationFailureIndicationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&downlinkDataNotificationFailureIndicationStackData, 0,
                sizeof (DownlinkDataNotificationFailureIndicationMsgData));
                rc =
                dynamic_cast<
                DownlinkDataNotificationFailureIndicationMsg & >(msg).
                decodeDownlinkDataNotificationFailureIndicationMsg(buffer,
                            downlinkDataNotificationFailureIndicationStackData,
                            msgDataLength);
            }
            break;
        }
        case EchoRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                EchoRequestMsg & >(msg).
                decodeEchoRequestMsg(buffer,
                            *(EchoRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&echoRequestStackData, 0,
                sizeof (EchoRequestMsgData));
                rc =
                dynamic_cast<
                EchoRequestMsg & >(msg).
                decodeEchoRequestMsg(buffer,
                            echoRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case EchoResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                EchoResponseMsg & >(msg).
                decodeEchoResponseMsg(buffer,
                            *(EchoResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&echoResponseStackData, 0,
                sizeof (EchoResponseMsgData));
                rc =
                dynamic_cast<
                EchoResponseMsg & >(msg).
                decodeEchoResponseMsg(buffer,
                            echoResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardRelocationCompleteNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardRelocationCompleteNotificationMsg & >(msg).
                decodeForwardRelocationCompleteNotificationMsg(buffer,
                            *(ForwardRelocationCompleteNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardRelocationCompleteNotificationStackData, 0,
                sizeof (ForwardRelocationCompleteNotificationMsgData));
                rc =
                dynamic_cast<
                ForwardRelocationCompleteNotificationMsg & >(msg).
                decodeForwardRelocationCompleteNotificationMsg(buffer,
                            forwardRelocationCompleteNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardRelocationCompleteAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardRelocationCompleteAcknowledgeMsg & >(msg).
                decodeForwardRelocationCompleteAcknowledgeMsg(buffer,
                            *(ForwardRelocationCompleteAcknowledgeMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardRelocationCompleteAcknowledgeStackData, 0,
                sizeof (ForwardRelocationCompleteAcknowledgeMsgData));
                rc =
                dynamic_cast<
                ForwardRelocationCompleteAcknowledgeMsg & >(msg).
                decodeForwardRelocationCompleteAcknowledgeMsg(buffer,
                            forwardRelocationCompleteAcknowledgeStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardAccessContextNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardAccessContextNotificationMsg & >(msg).
                decodeForwardAccessContextNotificationMsg(buffer,
                            *(ForwardAccessContextNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardAccessContextNotificationStackData, 0,
                sizeof (ForwardAccessContextNotificationMsgData));
                rc =
                dynamic_cast<
                ForwardAccessContextNotificationMsg & >(msg).
                decodeForwardAccessContextNotificationMsg(buffer,
                            forwardAccessContextNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardAccessContextAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardAccessContextAcknowledgeMsg & >(msg).
                decodeForwardAccessContextAcknowledgeMsg(buffer,
                            *(ForwardAccessContextAcknowledgeMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardAccessContextAcknowledgeStackData, 0,
                sizeof (ForwardAccessContextAcknowledgeMsgData));
                rc =
                dynamic_cast<
                ForwardAccessContextAcknowledgeMsg & >(msg).
                decodeForwardAccessContextAcknowledgeMsg(buffer,
                            forwardAccessContextAcknowledgeStackData,
                            msgDataLength);
            }
            break;
        }
        case RelocationCancelRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                RelocationCancelRequestMsg & >(msg).
                decodeRelocationCancelRequestMsg(buffer,
                            *(RelocationCancelRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&relocationCancelRequestStackData, 0,
                sizeof (RelocationCancelRequestMsgData));
                rc =
                dynamic_cast<
                RelocationCancelRequestMsg & >(msg).
                decodeRelocationCancelRequestMsg(buffer,
                            relocationCancelRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case RelocationCancelResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                RelocationCancelResponseMsg & >(msg).
                decodeRelocationCancelResponseMsg(buffer,
                            *(RelocationCancelResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&relocationCancelResponseStackData, 0,
                sizeof (RelocationCancelResponseMsgData));
                rc =
                dynamic_cast<
                RelocationCancelResponseMsg & >(msg).
                decodeRelocationCancelResponseMsg(buffer,
                            relocationCancelResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ConfigurationTransferTunnelMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ConfigurationTransferTunnelMsg & >(msg).
                decodeConfigurationTransferTunnelMsg(buffer,
                            *(ConfigurationTransferTunnelMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&configurationTransferTunnelStackData, 0,
                sizeof (ConfigurationTransferTunnelMsgData));
                rc =
                dynamic_cast<
                ConfigurationTransferTunnelMsg & >(msg).
                decodeConfigurationTransferTunnelMsg(buffer,
                            configurationTransferTunnelStackData,
                            msgDataLength);
            }
            break;
        }
        case IdentificationRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                IdentificationRequestMsg & >(msg).
                decodeIdentificationRequestMsg(buffer,
                            *(IdentificationRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&identificationRequestStackData, 0,
                sizeof (IdentificationRequestMsgData));
                rc =
                dynamic_cast<
                IdentificationRequestMsg & >(msg).
                decodeIdentificationRequestMsg(buffer,
                            identificationRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case IdentificationResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                IdentificationResponseMsg & >(msg).
                decodeIdentificationResponseMsg(buffer,
                            *(IdentificationResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&identificationResponseStackData, 0,
                sizeof (IdentificationResponseMsgData));
                rc =
                dynamic_cast<
                IdentificationResponseMsg & >(msg).
                decodeIdentificationResponseMsg(buffer,
                            identificationResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case SrvccPsToCsCompleteNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                SrvccPsToCsCompleteNotificationMsg & >(msg).
                decodeSrvccPsToCsCompleteNotificationMsg(buffer,
                            *(SrvccPsToCsCompleteNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&srvccPsToCsCompleteNotificationStackData, 0,
                sizeof (SrvccPsToCsCompleteNotificationMsgData));
                rc =
                dynamic_cast<
                SrvccPsToCsCompleteNotificationMsg & >(msg).
                decodeSrvccPsToCsCompleteNotificationMsg(buffer,
                            srvccPsToCsCompleteNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case PstoCsCompleteAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                PstoCsCompleteAcknowledgeMsg & >(msg).
                decodePstoCsCompleteAcknowledgeMsg(buffer,
                            *(PstoCsCompleteAcknowledgeMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&pstoCsCompleteAcknowledgeStackData, 0,
                sizeof (PstoCsCompleteAcknowledgeMsgData));
                rc =
                dynamic_cast<
                PstoCsCompleteAcknowledgeMsg & >(msg).
                decodePstoCsCompleteAcknowledgeMsg(buffer,
                            pstoCsCompleteAcknowledgeStackData,
                            msgDataLength);
            }
            break;
        }
        case SrvccPsToCsRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                SrvccPsToCsRequestMsg & >(msg).
                decodeSrvccPsToCsRequestMsg(buffer,
                            *(SrvccPsToCsRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&srvccPsToCsRequestStackData, 0,
                sizeof (SrvccPsToCsRequestMsgData));
                rc =
                dynamic_cast<
                SrvccPsToCsRequestMsg & >(msg).
                decodeSrvccPsToCsRequestMsg(buffer,
                            srvccPsToCsRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case SrvccPsToCsResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                SrvccPsToCsResponseMsg & >(msg).
                decodeSrvccPsToCsResponseMsg(buffer,
                            *(SrvccPsToCsResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&srvccPsToCsResponseStackData, 0,
                sizeof (SrvccPsToCsResponseMsgData));
                rc =
                dynamic_cast<
                SrvccPsToCsResponseMsg & >(msg).
                decodeSrvccPsToCsResponseMsg(buffer,
                            srvccPsToCsResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case PstoCsCancelNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                PstoCsCancelNotificationMsg & >(msg).
                decodePstoCsCancelNotificationMsg(buffer,
                            *(PstoCsCancelNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&pstoCsCancelNotificationStackData, 0,
                sizeof (PstoCsCancelNotificationMsgData));
                rc =
                dynamic_cast<
                PstoCsCancelNotificationMsg & >(msg).
                decodePstoCsCancelNotificationMsg(buffer,
                            pstoCsCancelNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case DetachNotificationMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                DetachNotificationMsg & >(msg).
                decodeDetachNotificationMsg(buffer,
                            *(DetachNotificationMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&detachNotificationStackData, 0,
                sizeof (DetachNotificationMsgData));
                rc =
                dynamic_cast<
                DetachNotificationMsg & >(msg).
                decodeDetachNotificationMsg(buffer,
                            detachNotificationStackData,
                            msgDataLength);
            }
            break;
        }
        case ContextRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ContextRequestMsg & >(msg).
                decodeContextRequestMsg(buffer,
                            *(ContextRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&contextRequestStackData, 0,
                sizeof (ContextRequestMsgData));
                rc =
                dynamic_cast<
                ContextRequestMsg & >(msg).
                decodeContextRequestMsg(buffer,
                            contextRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case ContextResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ContextResponseMsg & >(msg).
                decodeContextResponseMsg(buffer,
                            *(ContextResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&contextResponseStackData, 0,
                sizeof (ContextResponseMsgData));
                rc =
                dynamic_cast<
                ContextResponseMsg & >(msg).
                decodeContextResponseMsg(buffer,
                            contextResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardRelocationResponseMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardRelocationResponseMsg & >(msg).
                decodeForwardRelocationResponseMsg(buffer,
                            *(ForwardRelocationResponseMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardRelocationResponseStackData, 0,
                sizeof (ForwardRelocationResponseMsgData));
                rc =
                dynamic_cast<
                ForwardRelocationResponseMsg & >(msg).
                decodeForwardRelocationResponseMsg(buffer,
                            forwardRelocationResponseStackData,
                            msgDataLength);
            }
            break;
        }
        case ForwardRelocationRequestMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                ForwardRelocationRequestMsg & >(msg).
                decodeForwardRelocationRequestMsg(buffer,
                            *(ForwardRelocationRequestMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&forwardRelocationRequestStackData, 0,
                sizeof (ForwardRelocationRequestMsgData));
                rc =
                dynamic_cast<
                ForwardRelocationRequestMsg & >(msg).
                decodeForwardRelocationRequestMsg(buffer,
                            forwardRelocationRequestStackData,
                            msgDataLength);
            }
            break;
        }
        case SrvccPsToCsCancelAcknowledgeMsgType:
        {
            if (data_p != NULL)
            {
                rc =
                dynamic_cast<
                SrvccPsToCsCancelAcknowledgeMsg & >(msg).
                decodeSrvccPsToCsCancelAcknowledgeMsg(buffer,
                            *(SrvccPsToCsCancelAcknowledgeMsgData*)
                             data_p, msgDataLength);
            }
            else
            { 
                // Application wants to use the data structure provided by the stack
                // let us first clear any data present in the internal data structure
                memset (&srvccPsToCsCancelAcknowledgeStackData, 0,
                sizeof (SrvccPsToCsCancelAcknowledgeMsgData));
                rc =
                dynamic_cast<
                SrvccPsToCsCancelAcknowledgeMsg & >(msg).
                decodeSrvccPsToCsCancelAcknowledgeMsg(buffer,
                            srvccPsToCsCancelAcknowledgeStackData,
                            msgDataLength);
            }
            break;
        }
    }
    return rc;
}

void 
GtpV2Stack::display_v(Uint8 msgType, Debug& stream, void* data_p)
{
    // Display the messageType
    stream.add ((char *)"MessageType: ");
    stream.add (msgType);
    stream.endOfLine ();
      
    GtpV2Message& msg = GtpV2MsgFactory::getInstance ().getMsgObject (msgType);

    switch (msgType){
        case CreateSessionRequestMsgType:
        {
            stream.add ((char *)"Message: CreateSessionRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            CreateSessionRequestMsg & >(msg).
            displayCreateSessionRequestMsgData_v (*
                        ((CreateSessionRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            CreateSessionRequestMsg & >(msg).
            displayCreateSessionRequestMsgData_v
                        (createSessionRequestStackData, stream);
            }
           break;
        }
        case CreateSessionResponseMsgType:
        {
            stream.add ((char *)"Message: CreateSessionResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            CreateSessionResponseMsg & >(msg).
            displayCreateSessionResponseMsgData_v (*
                        ((CreateSessionResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            CreateSessionResponseMsg & >(msg).
            displayCreateSessionResponseMsgData_v
                        (createSessionResponseStackData, stream);
            }
           break;
        }
        case ModifyBearerRequestMsgType:
        {
            stream.add ((char *)"Message: ModifyBearerRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ModifyBearerRequestMsg & >(msg).
            displayModifyBearerRequestMsgData_v (*
                        ((ModifyBearerRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ModifyBearerRequestMsg & >(msg).
            displayModifyBearerRequestMsgData_v
                        (modifyBearerRequestStackData, stream);
            }
           break;
        }
        case ModifyBearerResponseMsgType:
        {
            stream.add ((char *)"Message: ModifyBearerResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ModifyBearerResponseMsg & >(msg).
            displayModifyBearerResponseMsgData_v (*
                        ((ModifyBearerResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ModifyBearerResponseMsg & >(msg).
            displayModifyBearerResponseMsgData_v
                        (modifyBearerResponseStackData, stream);
            }
           break;
        }
        case DeleteSessionRequestMsgType:
        {
            stream.add ((char *)"Message: DeleteSessionRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DeleteSessionRequestMsg & >(msg).
            displayDeleteSessionRequestMsgData_v (*
                        ((DeleteSessionRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DeleteSessionRequestMsg & >(msg).
            displayDeleteSessionRequestMsgData_v
                        (deleteSessionRequestStackData, stream);
            }
           break;
        }
        case DeleteSessionResponseMsgType:
        {
            stream.add ((char *)"Message: DeleteSessionResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DeleteSessionResponseMsg & >(msg).
            displayDeleteSessionResponseMsgData_v (*
                        ((DeleteSessionResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DeleteSessionResponseMsg & >(msg).
            displayDeleteSessionResponseMsgData_v
                        (deleteSessionResponseStackData, stream);
            }
           break;
        }
        case ReleaseAccessBearersRequestMsgType:
        {
            stream.add ((char *)"Message: ReleaseAccessBearersRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ReleaseAccessBearersRequestMsg & >(msg).
            displayReleaseAccessBearersRequestMsgData_v (*
                        ((ReleaseAccessBearersRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ReleaseAccessBearersRequestMsg & >(msg).
            displayReleaseAccessBearersRequestMsgData_v
                        (releaseAccessBearersRequestStackData, stream);
            }
           break;
        }
        case ReleaseAccessBearersResponseMsgType:
        {
            stream.add ((char *)"Message: ReleaseAccessBearersResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ReleaseAccessBearersResponseMsg & >(msg).
            displayReleaseAccessBearersResponseMsgData_v (*
                        ((ReleaseAccessBearersResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ReleaseAccessBearersResponseMsg & >(msg).
            displayReleaseAccessBearersResponseMsgData_v
                        (releaseAccessBearersResponseStackData, stream);
            }
           break;
        }
        case CreateBearerRequestMsgType:
        {
            stream.add ((char *)"Message: CreateBearerRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            CreateBearerRequestMsg & >(msg).
            displayCreateBearerRequestMsgData_v (*
                        ((CreateBearerRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            CreateBearerRequestMsg & >(msg).
            displayCreateBearerRequestMsgData_v
                        (createBearerRequestStackData, stream);
            }
           break;
        }
        case CreateBearerResponseMsgType:
        {
            stream.add ((char *)"Message: CreateBearerResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            CreateBearerResponseMsg & >(msg).
            displayCreateBearerResponseMsgData_v (*
                        ((CreateBearerResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            CreateBearerResponseMsg & >(msg).
            displayCreateBearerResponseMsgData_v
                        (createBearerResponseStackData, stream);
            }
           break;
        }
        case DeleteBearerRequestMsgType:
        {
            stream.add ((char *)"Message: DeleteBearerRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DeleteBearerRequestMsg & >(msg).
            displayDeleteBearerRequestMsgData_v (*
                        ((DeleteBearerRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DeleteBearerRequestMsg & >(msg).
            displayDeleteBearerRequestMsgData_v
                        (deleteBearerRequestStackData, stream);
            }
           break;
        }
        case DeleteBearerResponseMsgType:
        {
            stream.add ((char *)"Message: DeleteBearerResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DeleteBearerResponseMsg & >(msg).
            displayDeleteBearerResponseMsgData_v (*
                        ((DeleteBearerResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DeleteBearerResponseMsg & >(msg).
            displayDeleteBearerResponseMsgData_v
                        (deleteBearerResponseStackData, stream);
            }
           break;
        }
        case DownlinkDataNotificationMsgType:
        {
            stream.add ((char *)"Message: DownlinkDataNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DownlinkDataNotificationMsg & >(msg).
            displayDownlinkDataNotificationMsgData_v (*
                        ((DownlinkDataNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DownlinkDataNotificationMsg & >(msg).
            displayDownlinkDataNotificationMsgData_v
                        (downlinkDataNotificationStackData, stream);
            }
           break;
        }
        case DownlinkDataNotificationAcknowledgeMsgType:
        {
            stream.add ((char *)"Message: DownlinkDataNotificationAcknowledgeMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DownlinkDataNotificationAcknowledgeMsg & >(msg).
            displayDownlinkDataNotificationAcknowledgeMsgData_v (*
                        ((DownlinkDataNotificationAcknowledgeMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DownlinkDataNotificationAcknowledgeMsg & >(msg).
            displayDownlinkDataNotificationAcknowledgeMsgData_v
                        (downlinkDataNotificationAcknowledgeStackData, stream);
            }
           break;
        }
        case DownlinkDataNotificationFailureIndicationMsgType:
        {
            stream.add ((char *)"Message: DownlinkDataNotificationFailureIndicationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DownlinkDataNotificationFailureIndicationMsg & >(msg).
            displayDownlinkDataNotificationFailureIndicationMsgData_v (*
                        ((DownlinkDataNotificationFailureIndicationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DownlinkDataNotificationFailureIndicationMsg & >(msg).
            displayDownlinkDataNotificationFailureIndicationMsgData_v
                        (downlinkDataNotificationFailureIndicationStackData, stream);
            }
           break;
        }
        case EchoRequestMsgType:
        {
            stream.add ((char *)"Message: EchoRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            EchoRequestMsg & >(msg).
            displayEchoRequestMsgData_v (*
                        ((EchoRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            EchoRequestMsg & >(msg).
            displayEchoRequestMsgData_v
                        (echoRequestStackData, stream);
            }
           break;
        }
        case EchoResponseMsgType:
        {
            stream.add ((char *)"Message: EchoResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            EchoResponseMsg & >(msg).
            displayEchoResponseMsgData_v (*
                        ((EchoResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            EchoResponseMsg & >(msg).
            displayEchoResponseMsgData_v
                        (echoResponseStackData, stream);
            }
           break;
        }
        case ForwardRelocationCompleteNotificationMsgType:
        {
            stream.add ((char *)"Message: ForwardRelocationCompleteNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardRelocationCompleteNotificationMsg & >(msg).
            displayForwardRelocationCompleteNotificationMsgData_v (*
                        ((ForwardRelocationCompleteNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardRelocationCompleteNotificationMsg & >(msg).
            displayForwardRelocationCompleteNotificationMsgData_v
                        (forwardRelocationCompleteNotificationStackData, stream);
            }
           break;
        }
        case ForwardRelocationCompleteAcknowledgeMsgType:
        {
            stream.add ((char *)"Message: ForwardRelocationCompleteAcknowledgeMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardRelocationCompleteAcknowledgeMsg & >(msg).
            displayForwardRelocationCompleteAcknowledgeMsgData_v (*
                        ((ForwardRelocationCompleteAcknowledgeMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardRelocationCompleteAcknowledgeMsg & >(msg).
            displayForwardRelocationCompleteAcknowledgeMsgData_v
                        (forwardRelocationCompleteAcknowledgeStackData, stream);
            }
           break;
        }
        case ForwardAccessContextNotificationMsgType:
        {
            stream.add ((char *)"Message: ForwardAccessContextNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardAccessContextNotificationMsg & >(msg).
            displayForwardAccessContextNotificationMsgData_v (*
                        ((ForwardAccessContextNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardAccessContextNotificationMsg & >(msg).
            displayForwardAccessContextNotificationMsgData_v
                        (forwardAccessContextNotificationStackData, stream);
            }
           break;
        }
        case ForwardAccessContextAcknowledgeMsgType:
        {
            stream.add ((char *)"Message: ForwardAccessContextAcknowledgeMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardAccessContextAcknowledgeMsg & >(msg).
            displayForwardAccessContextAcknowledgeMsgData_v (*
                        ((ForwardAccessContextAcknowledgeMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardAccessContextAcknowledgeMsg & >(msg).
            displayForwardAccessContextAcknowledgeMsgData_v
                        (forwardAccessContextAcknowledgeStackData, stream);
            }
           break;
        }
        case RelocationCancelRequestMsgType:
        {
            stream.add ((char *)"Message: RelocationCancelRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            RelocationCancelRequestMsg & >(msg).
            displayRelocationCancelRequestMsgData_v (*
                        ((RelocationCancelRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            RelocationCancelRequestMsg & >(msg).
            displayRelocationCancelRequestMsgData_v
                        (relocationCancelRequestStackData, stream);
            }
           break;
        }
        case RelocationCancelResponseMsgType:
        {
            stream.add ((char *)"Message: RelocationCancelResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            RelocationCancelResponseMsg & >(msg).
            displayRelocationCancelResponseMsgData_v (*
                        ((RelocationCancelResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            RelocationCancelResponseMsg & >(msg).
            displayRelocationCancelResponseMsgData_v
                        (relocationCancelResponseStackData, stream);
            }
           break;
        }
        case ConfigurationTransferTunnelMsgType:
        {
            stream.add ((char *)"Message: ConfigurationTransferTunnelMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ConfigurationTransferTunnelMsg & >(msg).
            displayConfigurationTransferTunnelMsgData_v (*
                        ((ConfigurationTransferTunnelMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ConfigurationTransferTunnelMsg & >(msg).
            displayConfigurationTransferTunnelMsgData_v
                        (configurationTransferTunnelStackData, stream);
            }
           break;
        }
        case IdentificationRequestMsgType:
        {
            stream.add ((char *)"Message: IdentificationRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            IdentificationRequestMsg & >(msg).
            displayIdentificationRequestMsgData_v (*
                        ((IdentificationRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            IdentificationRequestMsg & >(msg).
            displayIdentificationRequestMsgData_v
                        (identificationRequestStackData, stream);
            }
           break;
        }
        case IdentificationResponseMsgType:
        {
            stream.add ((char *)"Message: IdentificationResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            IdentificationResponseMsg & >(msg).
            displayIdentificationResponseMsgData_v (*
                        ((IdentificationResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            IdentificationResponseMsg & >(msg).
            displayIdentificationResponseMsgData_v
                        (identificationResponseStackData, stream);
            }
           break;
        }
        case SrvccPsToCsCompleteNotificationMsgType:
        {
            stream.add ((char *)"Message: SrvccPsToCsCompleteNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            SrvccPsToCsCompleteNotificationMsg & >(msg).
            displaySrvccPsToCsCompleteNotificationMsgData_v (*
                        ((SrvccPsToCsCompleteNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            SrvccPsToCsCompleteNotificationMsg & >(msg).
            displaySrvccPsToCsCompleteNotificationMsgData_v
                        (srvccPsToCsCompleteNotificationStackData, stream);
            }
           break;
        }
        case PstoCsCompleteAcknowledgeMsgType:
        {
            stream.add ((char *)"Message: PstoCsCompleteAcknowledgeMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            PstoCsCompleteAcknowledgeMsg & >(msg).
            displayPstoCsCompleteAcknowledgeMsgData_v (*
                        ((PstoCsCompleteAcknowledgeMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            PstoCsCompleteAcknowledgeMsg & >(msg).
            displayPstoCsCompleteAcknowledgeMsgData_v
                        (pstoCsCompleteAcknowledgeStackData, stream);
            }
           break;
        }
        case SrvccPsToCsRequestMsgType:
        {
            stream.add ((char *)"Message: SrvccPsToCsRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            SrvccPsToCsRequestMsg & >(msg).
            displaySrvccPsToCsRequestMsgData_v (*
                        ((SrvccPsToCsRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            SrvccPsToCsRequestMsg & >(msg).
            displaySrvccPsToCsRequestMsgData_v
                        (srvccPsToCsRequestStackData, stream);
            }
           break;
        }
        case SrvccPsToCsResponseMsgType:
        {
            stream.add ((char *)"Message: SrvccPsToCsResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            SrvccPsToCsResponseMsg & >(msg).
            displaySrvccPsToCsResponseMsgData_v (*
                        ((SrvccPsToCsResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            SrvccPsToCsResponseMsg & >(msg).
            displaySrvccPsToCsResponseMsgData_v
                        (srvccPsToCsResponseStackData, stream);
            }
           break;
        }
        case PstoCsCancelNotificationMsgType:
        {
            stream.add ((char *)"Message: PstoCsCancelNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            PstoCsCancelNotificationMsg & >(msg).
            displayPstoCsCancelNotificationMsgData_v (*
                        ((PstoCsCancelNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            PstoCsCancelNotificationMsg & >(msg).
            displayPstoCsCancelNotificationMsgData_v
                        (pstoCsCancelNotificationStackData, stream);
            }
           break;
        }
        case DetachNotificationMsgType:
        {
            stream.add ((char *)"Message: DetachNotificationMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            DetachNotificationMsg & >(msg).
            displayDetachNotificationMsgData_v (*
                        ((DetachNotificationMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            DetachNotificationMsg & >(msg).
            displayDetachNotificationMsgData_v
                        (detachNotificationStackData, stream);
            }
           break;
        }
        case ContextRequestMsgType:
        {
            stream.add ((char *)"Message: ContextRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ContextRequestMsg & >(msg).
            displayContextRequestMsgData_v (*
                        ((ContextRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ContextRequestMsg & >(msg).
            displayContextRequestMsgData_v
                        (contextRequestStackData, stream);
            }
           break;
        }
        case ContextResponseMsgType:
        {
            stream.add ((char *)"Message: ContextResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ContextResponseMsg & >(msg).
            displayContextResponseMsgData_v (*
                        ((ContextResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ContextResponseMsg & >(msg).
            displayContextResponseMsgData_v
                        (contextResponseStackData, stream);
            }
           break;
        }
        case ForwardRelocationResponseMsgType:
        {
            stream.add ((char *)"Message: ForwardRelocationResponseMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardRelocationResponseMsg & >(msg).
            displayForwardRelocationResponseMsgData_v (*
                        ((ForwardRelocationResponseMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardRelocationResponseMsg & >(msg).
            displayForwardRelocationResponseMsgData_v
                        (forwardRelocationResponseStackData, stream);
            }
           break;
        }
        case ForwardRelocationRequestMsgType:
        {
            stream.add ((char *)"Message: ForwardRelocationRequestMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            ForwardRelocationRequestMsg & >(msg).
            displayForwardRelocationRequestMsgData_v (*
                        ((ForwardRelocationRequestMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            ForwardRelocationRequestMsg & >(msg).
            displayForwardRelocationRequestMsgData_v
                        (forwardRelocationRequestStackData, stream);
            }
           break;
        }
        case SrvccPsToCsCancelAcknowledgeMsgType:
        {
            stream.add ((char *)"Message: SrvccPsToCsCancelAcknowledgeMsg");
            stream.endOfLine ();
            if (data_p != NULL)
            {
            dynamic_cast<
            SrvccPsToCsCancelAcknowledgeMsg & >(msg).
            displaySrvccPsToCsCancelAcknowledgeMsgData_v (*
                        ((SrvccPsToCsCancelAcknowledgeMsgData*) data_p), stream);
            }
            else
            {
            // Application wants to use the data structure provided by the stack
            dynamic_cast<
            SrvccPsToCsCancelAcknowledgeMsg & >(msg).
            displaySrvccPsToCsCancelAcknowledgeMsgData_v
                        (srvccPsToCsCancelAcknowledgeStackData, stream);
            }
           break;
        }
    }
}
