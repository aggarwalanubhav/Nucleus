

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * srvccHoProcedureStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/srvccHoProcedureStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
SrvccHoStart::SrvccHoStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
SrvccHoStart::~SrvccHoStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
SrvccHoStart* SrvccHoStart::Instance()
{
        static SrvccHoStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void SrvccHoStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::split_bearer);
                actionTable.addAction(&ActionHandlers::send_ps_to_cs_req_to_msc);
                actionTable.addAction(&ActionHandlers::send_fwd_rel_req_to_sgsn);
                actionTable.setNextState(SrvccHoWfFwdRelResp::Instance());
                eventToActionsMap[SRVCC_HO_START] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t SrvccHoStart::getStateId()const
{
	return srvcc_ho_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* SrvccHoStart::getStateName()const
{
	return "srvcc_ho_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
SrvccHoWfFwdRelResp::SrvccHoWfFwdRelResp():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
SrvccHoWfFwdRelResp::~SrvccHoWfFwdRelResp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
SrvccHoWfFwdRelResp* SrvccHoWfFwdRelResp::Instance()
{
        static SrvccHoWfFwdRelResp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void SrvccHoWfFwdRelResp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_fwd_rel_res_from_sgsn);
                actionTable.setNextState(SrvccHoWfPsToCsResp::Instance());
                eventToActionsMap[FWD_REL_RES] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t SrvccHoWfFwdRelResp::getStateId()const
{
	return srvcc_ho_wf_fwd_rel_resp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* SrvccHoWfFwdRelResp::getStateName()const
{
	return "srvcc_ho_wf_fwd_rel_resp";
}

/******************************************************************************
* Constructor
******************************************************************************/
SrvccHoWfPsToCsResp::SrvccHoWfPsToCsResp():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
SrvccHoWfPsToCsResp::~SrvccHoWfPsToCsResp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
SrvccHoWfPsToCsResp* SrvccHoWfPsToCsResp::Instance()
{
        static SrvccHoWfPsToCsResp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void SrvccHoWfPsToCsResp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_ps_to_cs_res);
                actionTable.addAction(&ActionHandlers::send_srvcc_ho_command);
                actionTable.setNextState(SrvccHoWfPsToCsComp::Instance());
                eventToActionsMap[PS_TO_CS_RES] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t SrvccHoWfPsToCsResp::getStateId()const
{
	return srvcc_ho_wf_ps_to_cs_resp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* SrvccHoWfPsToCsResp::getStateName()const
{
	return "srvcc_ho_wf_ps_to_cs_resp";
}

/******************************************************************************
* Constructor
******************************************************************************/
SrvccHoWfPsToCsComp::SrvccHoWfPsToCsComp():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
SrvccHoWfPsToCsComp::~SrvccHoWfPsToCsComp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
SrvccHoWfPsToCsComp* SrvccHoWfPsToCsComp::Instance()
{
        static SrvccHoWfPsToCsComp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void SrvccHoWfPsToCsComp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_ps_to_cs_comp);
                actionTable.addAction(&ActionHandlers::send_del_bearer_command);
                eventToActionsMap[PS_TO_CS_COMP_RCVD] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t SrvccHoWfPsToCsComp::getStateId()const
{
	return srvcc_ho_wf_ps_to_cs_comp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* SrvccHoWfPsToCsComp::getStateName()const
{
	return "srvcc_ho_wf_ps_to_cs_comp";
}

/******************************************************************************
* Constructor
******************************************************************************/
SrvccHoWfDwdRelComp::SrvccHoWfDwdRelComp():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
SrvccHoWfDwdRelComp::~SrvccHoWfDwdRelComp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
SrvccHoWfDwdRelComp* SrvccHoWfDwdRelComp::Instance()
{
        static SrvccHoWfDwdRelComp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void SrvccHoWfDwdRelComp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_fwd_rel_comp);
                actionTable.addAction(&ActionHandlers::del_session_req);
                eventToActionsMap[FWD_REL_COMP_RECVD] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t SrvccHoWfDwdRelComp::getStateId()const
{
	return srvcc_ho_wf_dwd_rel_comp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* SrvccHoWfDwdRelComp::getStateName()const
{
	return "srvcc_ho_wf_dwd_rel_comp";
}
